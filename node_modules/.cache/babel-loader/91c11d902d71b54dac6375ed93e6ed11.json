{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('@motionone/utils');\n\nvar data = require('../data.cjs.js');\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\n\n\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\n\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n  x: \"translateX\",\n  y: \"translateY\",\n  z: \"translateZ\"\n};\nconst rotation = {\n  syntax: \"<angle>\",\n  initialValue: \"0deg\",\n  toDefaultUnit: v => v + \"deg\"\n};\nconst baseTransformProperties = {\n  translate: {\n    syntax: \"<length-percentage>\",\n    initialValue: \"0px\",\n    toDefaultUnit: v => v + \"px\"\n  },\n  rotate: rotation,\n  scale: {\n    syntax: \"<number>\",\n    initialValue: 1,\n    toDefaultUnit: utils.noopReturn\n  },\n  skew: rotation\n};\nconst transformDefinitions = new Map();\n\nconst asTransformCssVar = name => `--motion-${name}`;\n/**\n * Generate a list of every possible transform key\n */\n\n\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach(name => {\n  axes.forEach(axis => {\n    transforms.push(name + axis);\n    transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n  });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\n\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\n\n\nconst transformLookup = new Set(transforms);\n\nconst isTransform = name => transformLookup.has(name);\n\nconst addTransformToElement = (element, name) => {\n  // Map x to translateX etc\n  if (transformAlias[name]) name = transformAlias[name];\n  const {\n    transforms\n  } = data.getAnimationData(element);\n  utils.addUniqueItem(transforms, name);\n  /**\n   * TODO: An optimisation here could be to cache the transform in element data\n   * and only update if this has changed.\n   */\n\n  element.style.transform = buildTransformTemplate(transforms);\n};\n\nconst buildTransformTemplate = transforms => transforms.sort(compareTransformOrder).reduce(transformListToString, \"\").trim();\n\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\n\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;","map":{"version":3,"sources":["C:/Users/daman/Desktop/Final Project/gadgetopia/frontend/node_modules/@motionone/dom/dist/animate/utils/transforms.cjs.js"],"names":["Object","defineProperty","exports","value","utils","require","data","axes","order","transformAlias","x","y","z","rotation","syntax","initialValue","toDefaultUnit","v","baseTransformProperties","translate","rotate","scale","noopReturn","skew","transformDefinitions","Map","asTransformCssVar","name","transforms","forEach","axis","push","set","compareTransformOrder","a","b","indexOf","transformLookup","Set","isTransform","has","addTransformToElement","element","getAnimationData","addUniqueItem","style","transform","buildTransformTemplate","sort","reduce","transformListToString","trim","template"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@motionone/utils');\nvar data = require('../data.cjs.js');\n\n/**\n * A list of all transformable axes. We'll use this list to generated a version\n * of each axes for each transform.\n */\nconst axes = [\"\", \"X\", \"Y\", \"Z\"];\n/**\n * An ordered array of each transformable value. By default, transform values\n * will be sorted to this order.\n */\nconst order = [\"translate\", \"scale\", \"rotate\", \"skew\"];\nconst transformAlias = {\n    x: \"translateX\",\n    y: \"translateY\",\n    z: \"translateZ\",\n};\nconst rotation = {\n    syntax: \"<angle>\",\n    initialValue: \"0deg\",\n    toDefaultUnit: (v) => v + \"deg\",\n};\nconst baseTransformProperties = {\n    translate: {\n        syntax: \"<length-percentage>\",\n        initialValue: \"0px\",\n        toDefaultUnit: (v) => v + \"px\",\n    },\n    rotate: rotation,\n    scale: {\n        syntax: \"<number>\",\n        initialValue: 1,\n        toDefaultUnit: utils.noopReturn,\n    },\n    skew: rotation,\n};\nconst transformDefinitions = new Map();\nconst asTransformCssVar = (name) => `--motion-${name}`;\n/**\n * Generate a list of every possible transform key\n */\nconst transforms = [\"x\", \"y\", \"z\"];\norder.forEach((name) => {\n    axes.forEach((axis) => {\n        transforms.push(name + axis);\n        transformDefinitions.set(asTransformCssVar(name + axis), baseTransformProperties[name]);\n    });\n});\n/**\n * A function to use with Array.sort to sort transform keys by their default order.\n */\nconst compareTransformOrder = (a, b) => transforms.indexOf(a) - transforms.indexOf(b);\n/**\n * Provide a quick way to check if a string is the name of a transform\n */\nconst transformLookup = new Set(transforms);\nconst isTransform = (name) => transformLookup.has(name);\nconst addTransformToElement = (element, name) => {\n    // Map x to translateX etc\n    if (transformAlias[name])\n        name = transformAlias[name];\n    const { transforms } = data.getAnimationData(element);\n    utils.addUniqueItem(transforms, name);\n    /**\n     * TODO: An optimisation here could be to cache the transform in element data\n     * and only update if this has changed.\n     */\n    element.style.transform = buildTransformTemplate(transforms);\n};\nconst buildTransformTemplate = (transforms) => transforms\n    .sort(compareTransformOrder)\n    .reduce(transformListToString, \"\")\n    .trim();\nconst transformListToString = (template, name) => `${template} ${name}(var(${asTransformCssVar(name)}))`;\n\nexports.addTransformToElement = addTransformToElement;\nexports.asTransformCssVar = asTransformCssVar;\nexports.axes = axes;\nexports.buildTransformTemplate = buildTransformTemplate;\nexports.compareTransformOrder = compareTransformOrder;\nexports.isTransform = isTransform;\nexports.transformAlias = transformAlias;\nexports.transformDefinitions = transformDefinitions;\n"]},"metadata":{},"sourceType":"script"}