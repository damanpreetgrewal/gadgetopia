{"ast":null,"code":"import { __read, __spreadArray } from 'tslib';\nimport { wrap } from 'popmotion';\nimport { useRef, useState, useCallback } from 'react';\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\n\nfunction useCycle() {\n  var items = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    items[_i] = arguments[_i];\n  }\n\n  var index = useRef(0);\n\n  var _a = __read(useState(items[index.current]), 2),\n      item = _a[0],\n      setItem = _a[1];\n\n  var runCycle = useCallback(function (next) {\n    index.current = typeof next !== \"number\" ? wrap(0, items.length, index.current + 1) : next;\n    setItem(items[index.current]);\n  }, __spreadArray([items.length], __read(items), false));\n  return [item, runCycle];\n}\n\nexport { useCycle };","map":{"version":3,"sources":["C:/Users/daman/Desktop/Final Project/gadgetopia/frontend/node_modules/framer-motion/dist/es/utils/use-cycle.mjs"],"names":["__read","__spreadArray","wrap","useRef","useState","useCallback","useCycle","items","_i","arguments","length","index","_a","current","item","setItem","runCycle","next"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,aAAjB,QAAsC,OAAtC;AACA,SAASC,IAAT,QAAqB,WAArB;AACA,SAASC,MAAT,EAAiBC,QAAjB,EAA2BC,WAA3B,QAA8C,OAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,QAAT,GAAoB;AAChB,MAAIC,KAAK,GAAG,EAAZ;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGC,SAAS,CAACC,MAAhC,EAAwCF,EAAE,EAA1C,EAA8C;AAC1CD,IAAAA,KAAK,CAACC,EAAD,CAAL,GAAYC,SAAS,CAACD,EAAD,CAArB;AACH;;AACD,MAAIG,KAAK,GAAGR,MAAM,CAAC,CAAD,CAAlB;;AACA,MAAIS,EAAE,GAAGZ,MAAM,CAACI,QAAQ,CAACG,KAAK,CAACI,KAAK,CAACE,OAAP,CAAN,CAAT,EAAiC,CAAjC,CAAf;AAAA,MAAoDC,IAAI,GAAGF,EAAE,CAAC,CAAD,CAA7D;AAAA,MAAkEG,OAAO,GAAGH,EAAE,CAAC,CAAD,CAA9E;;AACA,MAAII,QAAQ,GAAGX,WAAW,CAAC,UAAUY,IAAV,EAAgB;AACvCN,IAAAA,KAAK,CAACE,OAAN,GACI,OAAOI,IAAP,KAAgB,QAAhB,GACMf,IAAI,CAAC,CAAD,EAAIK,KAAK,CAACG,MAAV,EAAkBC,KAAK,CAACE,OAAN,GAAgB,CAAlC,CADV,GAEMI,IAHV;AAIAF,IAAAA,OAAO,CAACR,KAAK,CAACI,KAAK,CAACE,OAAP,CAAN,CAAP;AACH,GANyB,EAMvBZ,aAAa,CAAC,CAACM,KAAK,CAACG,MAAP,CAAD,EAAiBV,MAAM,CAACO,KAAD,CAAvB,EAAgC,KAAhC,CANU,CAA1B;AAOA,SAAO,CAACO,IAAD,EAAOE,QAAP,CAAP;AACH;;AAED,SAASV,QAAT","sourcesContent":["import { __read, __spreadArray } from 'tslib';\nimport { wrap } from 'popmotion';\nimport { useRef, useState, useCallback } from 'react';\n\n/**\n * Cycles through a series of visual properties. Can be used to toggle between or cycle through animations. It works similar to `useState` in React. It is provided an initial array of possible states, and returns an array of two arguments.\n *\n * An index value can be passed to the returned `cycle` function to cycle to a specific index.\n *\n * ```jsx\n * import * as React from \"react\"\n * import { motion, useCycle } from \"framer-motion\"\n *\n * export const MyComponent = () => {\n *   const [x, cycleX] = useCycle(0, 50, 100)\n *\n *   return (\n *     <motion.div\n *       animate={{ x: x }}\n *       onTap={() => cycleX()}\n *      />\n *    )\n * }\n * ```\n *\n * @param items - items to cycle through\n * @returns [currentState, cycleState]\n *\n * @public\n */\nfunction useCycle() {\n    var items = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        items[_i] = arguments[_i];\n    }\n    var index = useRef(0);\n    var _a = __read(useState(items[index.current]), 2), item = _a[0], setItem = _a[1];\n    var runCycle = useCallback(function (next) {\n        index.current =\n            typeof next !== \"number\"\n                ? wrap(0, items.length, index.current + 1)\n                : next;\n        setItem(items[index.current]);\n    }, __spreadArray([items.length], __read(items), false));\n    return [item, runCycle];\n}\n\nexport { useCycle };\n"]},"metadata":{},"sourceType":"module"}