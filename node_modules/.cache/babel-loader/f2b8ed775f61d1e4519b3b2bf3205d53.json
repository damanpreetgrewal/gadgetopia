{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar utils = require('@motionone/utils');\n\nvar info = require('./info.cjs.js');\n\nvar index = require('./offsets/index.cjs.js');\n\nfunction measure(container, target = container, info) {\n  /**\n   * Find inset of target within scrollable container\n   */\n  info.x.targetOffset = 0;\n  info.y.targetOffset = 0;\n\n  if (target !== container) {\n    let node = target;\n\n    while (node && node != container) {\n      info.x.targetOffset += node.offsetLeft;\n      info.y.targetOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n  }\n\n  info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;\n  info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;\n  info.x.containerLength = container.clientWidth;\n  info.y.containerLength = container.clientHeight;\n}\n\nfunction createOnScrollHandler(element, onScroll, info$1, options = {}) {\n  const axis = options.axis || \"y\";\n  return {\n    measure: () => measure(element, options.target, info$1),\n    update: time => {\n      info.updateScrollInfo(element, info$1, time);\n\n      if (options.offset || options.target) {\n        index.resolveOffsets(element, info$1, options);\n      }\n    },\n    notify: typeof onScroll === \"function\" ? () => onScroll(info$1) : scrubAnimation(onScroll, info$1[axis])\n  };\n}\n\nfunction scrubAnimation(controls, axisInfo) {\n  controls.pause();\n  controls.forEachNative((animation, {\n    easing\n  }) => {\n    var _a, _b;\n\n    if (animation.updateDuration) {\n      if (!easing) animation.easing = utils.noopReturn;\n      animation.updateDuration(1);\n    } else {\n      const timingOptions = {\n        duration: 1000\n      };\n      if (!easing) timingOptions.easing = \"linear\";\n      (_b = (_a = animation.effect) === null || _a === void 0 ? void 0 : _a.updateTiming) === null || _b === void 0 ? void 0 : _b.call(_a, timingOptions);\n    }\n  });\n  return () => {\n    controls.currentTime = axisInfo.progress;\n  };\n}\n\nexports.createOnScrollHandler = createOnScrollHandler;","map":{"version":3,"sources":["C:/Users/daman/Desktop/Final Project/gadgetopia/frontend/node_modules/@motionone/dom/dist/gestures/scroll/on-scroll-handler.cjs.js"],"names":["Object","defineProperty","exports","value","utils","require","info","index","measure","container","target","x","targetOffset","y","node","offsetLeft","offsetTop","offsetParent","targetLength","scrollWidth","clientWidth","scrollHeight","clientHeight","containerLength","createOnScrollHandler","element","onScroll","info$1","options","axis","update","time","updateScrollInfo","offset","resolveOffsets","notify","scrubAnimation","controls","axisInfo","pause","forEachNative","animation","easing","_a","_b","updateDuration","noopReturn","timingOptions","duration","effect","updateTiming","call","currentTime","progress"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar utils = require('@motionone/utils');\nvar info = require('./info.cjs.js');\nvar index = require('./offsets/index.cjs.js');\n\nfunction measure(container, target = container, info) {\n    /**\n     * Find inset of target within scrollable container\n     */\n    info.x.targetOffset = 0;\n    info.y.targetOffset = 0;\n    if (target !== container) {\n        let node = target;\n        while (node && node != container) {\n            info.x.targetOffset += node.offsetLeft;\n            info.y.targetOffset += node.offsetTop;\n            node = node.offsetParent;\n        }\n    }\n    info.x.targetLength =\n        target === container ? target.scrollWidth : target.clientWidth;\n    info.y.targetLength =\n        target === container ? target.scrollHeight : target.clientHeight;\n    info.x.containerLength = container.clientWidth;\n    info.y.containerLength = container.clientHeight;\n}\nfunction createOnScrollHandler(element, onScroll, info$1, options = {}) {\n    const axis = options.axis || \"y\";\n    return {\n        measure: () => measure(element, options.target, info$1),\n        update: (time) => {\n            info.updateScrollInfo(element, info$1, time);\n            if (options.offset || options.target) {\n                index.resolveOffsets(element, info$1, options);\n            }\n        },\n        notify: typeof onScroll === \"function\"\n            ? () => onScroll(info$1)\n            : scrubAnimation(onScroll, info$1[axis]),\n    };\n}\nfunction scrubAnimation(controls, axisInfo) {\n    controls.pause();\n    controls.forEachNative((animation, { easing }) => {\n        var _a, _b;\n        if (animation.updateDuration) {\n            if (!easing)\n                animation.easing = utils.noopReturn;\n            animation.updateDuration(1);\n        }\n        else {\n            const timingOptions = { duration: 1000 };\n            if (!easing)\n                timingOptions.easing = \"linear\";\n            (_b = (_a = animation.effect) === null || _a === void 0 ? void 0 : _a.updateTiming) === null || _b === void 0 ? void 0 : _b.call(_a, timingOptions);\n        }\n    });\n    return () => {\n        controls.currentTime = axisInfo.progress;\n    };\n}\n\nexports.createOnScrollHandler = createOnScrollHandler;\n"]},"metadata":{},"sourceType":"script"}