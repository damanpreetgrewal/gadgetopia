{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Gets the current state. If the selectedValue is controlled,\n * the `value` prop is the source of truth instead of the internal state.\n */\n\nfunction getControlledState(internalState, props) {\n  if (props.value !== undefined) {\n    return _extends({}, internalState, {\n      selectedValue: props.value\n    });\n  }\n\n  return internalState;\n}\n\nfunction areOptionsEqual(option1, option2, optionComparer) {\n  if (option1 === option2) {\n    return true;\n  }\n\n  if (option1 === null || option2 === null) {\n    return false;\n  }\n\n  return optionComparer(option1, option2);\n}\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\n\nfunction useStateChangeDetection(nextState, internalPreviousState, propsRef) {\n  React.useEffect(() => {\n    if (!propsRef.current) {\n      return;\n    }\n\n    const previousState = getControlledState(internalPreviousState, propsRef.current);\n    const {\n      multiple,\n      optionComparer\n    } = propsRef.current;\n\n    if (multiple) {\n      var _previousState$select;\n\n      const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];\n      const nextSelectedValues = nextState.selectedValue;\n      const onChange = propsRef.current.onChange;\n\n      if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {\n        onChange == null ? void 0 : onChange(nextSelectedValues);\n      }\n    } else {\n      const previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;\n      const nextSelectedValue = nextState.selectedValue;\n      const onChange = propsRef.current.onChange;\n\n      if (!areOptionsEqual(nextSelectedValue, previousSelectedValue, optionComparer)) {\n        onChange == null ? void 0 : onChange(nextSelectedValue);\n      }\n    }\n  }, [nextState.selectedValue, internalPreviousState, propsRef]);\n  React.useEffect(() => {\n    if (!propsRef.current) {\n      return;\n    } // Fires the highlightChange event when reducer returns changed `highlightedValue`.\n\n\n    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {\n      var _propsRef$current, _propsRef$current$onH;\n\n      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, nextState.highlightedValue);\n    }\n  }, [nextState.highlightedValue, internalPreviousState.highlightedValue, propsRef]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var _ref;\n\n  const {\n    value,\n    defaultValue\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const initialSelectedValue = (_ref = value === undefined ? defaultValue : value) != null ? _ref : props.multiple ? [] : null;\n  const initalState = {\n    highlightedValue: null,\n    selectedValue: initialSelectedValue\n  };\n  const combinedReducer = React.useCallback((state, action) => {\n    if (externalReducer) {\n      return externalReducer(getControlledState(state, propsRef.current), action);\n    }\n\n    return internalReducer(getControlledState(state, propsRef.current), action);\n  }, [externalReducer, internalReducer, propsRef]);\n  const [nextState, dispatch] = React.useReducer(combinedReducer, initalState);\n  const previousState = React.useRef(initalState);\n  React.useEffect(() => {\n    previousState.current = nextState;\n  }, [previousState, nextState]);\n  useStateChangeDetection(nextState, previousState.current, propsRef);\n  return [getControlledState(nextState, propsRef.current), dispatch];\n}","map":{"version":3,"sources":["C:/Users/daman/Desktop/Final Project/gadgetopia/frontend/node_modules/@mui/base/ListboxUnstyled/useControllableReducer.js"],"names":["_extends","React","areArraysEqual","getControlledState","internalState","props","value","undefined","selectedValue","areOptionsEqual","option1","option2","optionComparer","useStateChangeDetection","nextState","internalPreviousState","propsRef","useEffect","current","previousState","multiple","_previousState$select","previousSelectedValues","nextSelectedValues","onChange","previousSelectedValue","nextSelectedValue","highlightedValue","_propsRef$current","_propsRef$current$onH","onHighlightChange","call","useControllableReducer","internalReducer","externalReducer","_ref","defaultValue","useRef","initialSelectedValue","initalState","combinedReducer","useCallback","state","action","dispatch","useReducer"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport areArraysEqual from '../utils/areArraysEqual';\n/**\n * Gets the current state. If the selectedValue is controlled,\n * the `value` prop is the source of truth instead of the internal state.\n */\n\nfunction getControlledState(internalState, props) {\n  if (props.value !== undefined) {\n    return _extends({}, internalState, {\n      selectedValue: props.value\n    });\n  }\n\n  return internalState;\n}\n\nfunction areOptionsEqual(option1, option2, optionComparer) {\n  if (option1 === option2) {\n    return true;\n  }\n\n  if (option1 === null || option2 === null) {\n    return false;\n  }\n\n  return optionComparer(option1, option2);\n}\n/**\n * Triggers change event handlers when reducer returns changed state.\n */\n\n\nfunction useStateChangeDetection(nextState, internalPreviousState, propsRef) {\n  React.useEffect(() => {\n    if (!propsRef.current) {\n      return;\n    }\n\n    const previousState = getControlledState(internalPreviousState, propsRef.current);\n    const {\n      multiple,\n      optionComparer\n    } = propsRef.current;\n\n    if (multiple) {\n      var _previousState$select;\n\n      const previousSelectedValues = (_previousState$select = previousState == null ? void 0 : previousState.selectedValue) != null ? _previousState$select : [];\n      const nextSelectedValues = nextState.selectedValue;\n      const onChange = propsRef.current.onChange;\n\n      if (!areArraysEqual(nextSelectedValues, previousSelectedValues, optionComparer)) {\n        onChange == null ? void 0 : onChange(nextSelectedValues);\n      }\n    } else {\n      const previousSelectedValue = previousState == null ? void 0 : previousState.selectedValue;\n      const nextSelectedValue = nextState.selectedValue;\n      const onChange = propsRef.current.onChange;\n\n      if (!areOptionsEqual(nextSelectedValue, previousSelectedValue, optionComparer)) {\n        onChange == null ? void 0 : onChange(nextSelectedValue);\n      }\n    }\n  }, [nextState.selectedValue, internalPreviousState, propsRef]);\n  React.useEffect(() => {\n    if (!propsRef.current) {\n      return;\n    } // Fires the highlightChange event when reducer returns changed `highlightedValue`.\n\n\n    if (!areOptionsEqual(internalPreviousState.highlightedValue, nextState.highlightedValue, propsRef.current.optionComparer)) {\n      var _propsRef$current, _propsRef$current$onH;\n\n      (_propsRef$current = propsRef.current) == null ? void 0 : (_propsRef$current$onH = _propsRef$current.onHighlightChange) == null ? void 0 : _propsRef$current$onH.call(_propsRef$current, nextState.highlightedValue);\n    }\n  }, [nextState.highlightedValue, internalPreviousState.highlightedValue, propsRef]);\n}\n\nexport default function useControllableReducer(internalReducer, externalReducer, props) {\n  var _ref;\n\n  const {\n    value,\n    defaultValue\n  } = props;\n  const propsRef = React.useRef(props);\n  propsRef.current = props;\n  const initialSelectedValue = (_ref = value === undefined ? defaultValue : value) != null ? _ref : props.multiple ? [] : null;\n  const initalState = {\n    highlightedValue: null,\n    selectedValue: initialSelectedValue\n  };\n  const combinedReducer = React.useCallback((state, action) => {\n    if (externalReducer) {\n      return externalReducer(getControlledState(state, propsRef.current), action);\n    }\n\n    return internalReducer(getControlledState(state, propsRef.current), action);\n  }, [externalReducer, internalReducer, propsRef]);\n  const [nextState, dispatch] = React.useReducer(combinedReducer, initalState);\n  const previousState = React.useRef(initalState);\n  React.useEffect(() => {\n    previousState.current = nextState;\n  }, [previousState, nextState]);\n  useStateChangeDetection(nextState, previousState.current, propsRef);\n  return [getControlledState(nextState, propsRef.current), dispatch];\n}"]},"metadata":{},"sourceType":"module"}