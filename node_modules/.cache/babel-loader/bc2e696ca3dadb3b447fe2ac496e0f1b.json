{"ast":null,"code":"import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\n\nvar animationTarget = 1000;\n\nfunction createProjectionNode(_a) {\n  var attachResizeListener = _a.attachResizeListener,\n      defaultParent = _a.defaultParent,\n      measureScroll = _a.measureScroll,\n      checkIsScrollRoot = _a.checkIsScrollRoot,\n      resetTransform = _a.resetTransform;\n  return function () {\n    function ProjectionNode(id, latestValues, parent) {\n      var _this = this;\n\n      if (latestValues === void 0) {\n        latestValues = {};\n      }\n\n      if (parent === void 0) {\n        parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent();\n      }\n      /**\n       * A Set containing all this component's children. This is used to iterate\n       * through the children.\n       *\n       * TODO: This could be faster to iterate as a flat array stored on the root node.\n       */\n\n\n      this.children = new Set();\n      /**\n       * Options for the node. We use this to configure what kind of layout animations\n       * we should perform (if any).\n       */\n\n      this.options = {};\n      /**\n       * We use this to detect when its safe to shut down part of a projection tree.\n       * We have to keep projecting children for scale correction and relative projection\n       * until all their parents stop performing layout animations.\n       */\n\n      this.isTreeAnimating = false;\n      this.isAnimationBlocked = false;\n      /**\n       * Flag to true if we think this layout has been changed. We can't always know this,\n       * currently we set it to true every time a component renders, or if it has a layoutDependency\n       * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n       * and if one node is dirtied, they all are.\n       */\n\n      this.isLayoutDirty = false;\n      /**\n       * Block layout updates for instant layout transitions throughout the tree.\n       */\n\n      this.updateManuallyBlocked = false;\n      this.updateBlockedByResize = false;\n      /**\n       * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n       * call.\n       */\n\n      this.isUpdating = false;\n      /**\n       * If this is an SVG element we currently disable projection transforms\n       */\n\n      this.isSVG = false;\n      /**\n       * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n       * its projection styles.\n       */\n\n      this.needsReset = false;\n      /**\n       * Flags whether this node should have its transform reset prior to measuring.\n       */\n\n      this.shouldResetTransform = false;\n      /**\n       * An object representing the calculated contextual/accumulated/tree scale.\n       * This will be used to scale calculcated projection transforms, as these are\n       * calculated in screen-space but need to be scaled for elements to actually\n       * make it to their calculated destinations.\n       *\n       * TODO: Lazy-init\n       */\n\n      this.treeScale = {\n        x: 1,\n        y: 1\n      };\n      /**\n       *\n       */\n\n      this.eventHandlers = new Map(); // Note: Currently only running on root node\n\n      this.potentialNodes = new Map();\n\n      this.checkUpdateFailed = function () {\n        if (_this.isUpdating) {\n          _this.isUpdating = false;\n\n          _this.clearAllSnapshots();\n        }\n      };\n\n      this.updateProjection = function () {\n        _this.nodes.forEach(resolveTargetDelta);\n\n        _this.nodes.forEach(calcProjection);\n      };\n\n      this.hasProjected = false;\n      this.isVisible = true;\n      this.animationProgress = 0;\n      /**\n       * Shared layout\n       */\n      // TODO Only running on root node\n\n      this.sharedNodes = new Map();\n      this.id = id;\n      this.latestValues = latestValues;\n      this.root = parent ? parent.root || parent : this;\n      this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n      this.parent = parent;\n      this.depth = parent ? parent.depth + 1 : 0;\n      id && this.root.registerPotentialNode(id, this);\n\n      for (var i = 0; i < this.path.length; i++) {\n        this.path[i].shouldResetTransform = true;\n      }\n\n      if (this.root === this) this.nodes = new FlatTree();\n    }\n\n    ProjectionNode.prototype.addEventListener = function (name, handler) {\n      if (!this.eventHandlers.has(name)) {\n        this.eventHandlers.set(name, new SubscriptionManager());\n      }\n\n      return this.eventHandlers.get(name).add(handler);\n    };\n\n    ProjectionNode.prototype.notifyListeners = function (name) {\n      var args = [];\n\n      for (var _i = 1; _i < arguments.length; _i++) {\n        args[_i - 1] = arguments[_i];\n      }\n\n      var subscriptionManager = this.eventHandlers.get(name);\n      subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n    };\n\n    ProjectionNode.prototype.hasListeners = function (name) {\n      return this.eventHandlers.has(name);\n    };\n\n    ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n      this.potentialNodes.set(id, node);\n    };\n    /**\n     * Lifecycles\n     */\n\n\n    ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n      var _this = this;\n\n      var _a;\n\n      if (isLayoutDirty === void 0) {\n        isLayoutDirty = false;\n      }\n\n      if (this.instance) return;\n      this.isSVG = instance instanceof SVGElement && instance.tagName !== \"svg\";\n      this.instance = instance;\n      var _b = this.options,\n          layoutId = _b.layoutId,\n          layout = _b.layout,\n          visualElement = _b.visualElement;\n\n      if (visualElement && !visualElement.getInstance()) {\n        visualElement.mount(instance);\n      }\n\n      this.root.nodes.add(this);\n      (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n      this.id && this.root.potentialNodes.delete(this.id);\n\n      if (isLayoutDirty && (layout || layoutId)) {\n        this.isLayoutDirty = true;\n      }\n\n      if (attachResizeListener) {\n        var unblockTimeout_1;\n\n        var resizeUnblockUpdate_1 = function () {\n          return _this.root.updateBlockedByResize = false;\n        };\n\n        attachResizeListener(instance, function () {\n          _this.root.updateBlockedByResize = true;\n          clearTimeout(unblockTimeout_1);\n          unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n\n          if (globalProjectionState.hasAnimatedSinceResize) {\n            globalProjectionState.hasAnimatedSinceResize = false;\n\n            _this.nodes.forEach(finishAnimation);\n          }\n        });\n      }\n\n      if (layoutId) {\n        this.root.registerSharedNode(layoutId, this);\n      } // Only register the handler if it requires layout animation\n\n\n      if (this.options.animate !== false && visualElement && (layoutId || layout)) {\n        this.addEventListener(\"didUpdate\", function (_a) {\n          var _b, _c, _d, _e, _f;\n\n          var delta = _a.delta,\n              hasLayoutChanged = _a.hasLayoutChanged,\n              hasRelativeTargetChanged = _a.hasRelativeTargetChanged,\n              newLayout = _a.layout;\n\n          if (_this.isTreeAnimationBlocked()) {\n            _this.target = undefined;\n            _this.relativeTarget = undefined;\n            return;\n          } // TODO: Check here if an animation exists\n\n\n          var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n\n          var _g = visualElement.getProps(),\n              onLayoutAnimationStart = _g.onLayoutAnimationStart,\n              onLayoutAnimationComplete = _g.onLayoutAnimationComplete;\n          /**\n           * The target layout of the element might stay the same,\n           * but its position relative to its parent has changed.\n           */\n\n\n          var targetChanged = !_this.targetLayout || !boxEquals(_this.targetLayout, newLayout) || hasRelativeTargetChanged;\n          /**\n           * If the layout hasn't seemed to have changed, it might be that the\n           * element is visually in the same place in the document but its position\n           * relative to its parent has indeed changed. So here we check for that.\n           */\n\n          var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n\n          if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) || hasOnlyRelativeTargetChanged || hasLayoutChanged && (targetChanged || !_this.currentAnimation)) {\n            if (_this.resumeFrom) {\n              _this.resumingFrom = _this.resumeFrom;\n              _this.resumingFrom.resumingFrom = undefined;\n            }\n\n            _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n\n            var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), {\n              onPlay: onLayoutAnimationStart,\n              onComplete: onLayoutAnimationComplete\n            });\n\n            if (visualElement.shouldReduceMotion) {\n              animationOptions.delay = 0;\n              animationOptions.type = false;\n            }\n\n            _this.startAnimation(animationOptions);\n          } else {\n            /**\n             * If the layout hasn't changed and we have an animation that hasn't started yet,\n             * finish it immediately. Otherwise it will be animating from a location\n             * that was probably never commited to screen and look like a jumpy box.\n             */\n            if (!hasLayoutChanged && _this.animationProgress === 0) {\n              _this.finishAnimation();\n            }\n\n            _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n          }\n\n          _this.targetLayout = newLayout;\n        });\n      }\n    };\n\n    ProjectionNode.prototype.unmount = function () {\n      var _a, _b;\n\n      this.options.layoutId && this.willUpdate();\n      this.root.nodes.remove(this);\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n      (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n      this.instance = undefined;\n      cancelSync.preRender(this.updateProjection);\n    }; // only on the root\n\n\n    ProjectionNode.prototype.blockUpdate = function () {\n      this.updateManuallyBlocked = true;\n    };\n\n    ProjectionNode.prototype.unblockUpdate = function () {\n      this.updateManuallyBlocked = false;\n    };\n\n    ProjectionNode.prototype.isUpdateBlocked = function () {\n      return this.updateManuallyBlocked || this.updateBlockedByResize;\n    };\n\n    ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n      var _a;\n\n      return this.isAnimationBlocked || ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) || false;\n    }; // Note: currently only running on root node\n\n\n    ProjectionNode.prototype.startUpdate = function () {\n      var _a;\n\n      if (this.isUpdateBlocked()) return;\n      this.isUpdating = true;\n      (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n    };\n\n    ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n      var _a, _b, _c;\n\n      if (shouldNotifyListeners === void 0) {\n        shouldNotifyListeners = true;\n      }\n\n      if (this.root.isUpdateBlocked()) {\n        (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n        return;\n      }\n\n      !this.root.isUpdating && this.root.startUpdate();\n      if (this.isLayoutDirty) return;\n      this.isLayoutDirty = true;\n\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        node.shouldResetTransform = true;\n        /**\n         * TODO: Check we haven't updated the scroll\n         * since the last didUpdate\n         */\n\n        node.updateScroll();\n      }\n\n      var _d = this.options,\n          layoutId = _d.layoutId,\n          layout = _d.layout;\n      if (layoutId === undefined && !layout) return;\n      var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n      this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      this.updateSnapshot();\n      shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n    }; // Note: Currently only running on root node\n\n\n    ProjectionNode.prototype.didUpdate = function () {\n      var updateWasBlocked = this.isUpdateBlocked(); // When doing an instant transition, we skip the layout update,\n      // but should still clean up the measurements so that the next\n      // snapshot could be taken correctly.\n\n      if (updateWasBlocked) {\n        this.unblockUpdate();\n        this.clearAllSnapshots();\n        this.nodes.forEach(clearMeasurements);\n        return;\n      }\n\n      if (!this.isUpdating) return;\n      this.isUpdating = false;\n      /**\n       * Search for and mount newly-added projection elements.\n       *\n       * TODO: Every time a new component is rendered we could search up the tree for\n       * the closest mounted node and query from there rather than document.\n       */\n\n      if (this.potentialNodes.size) {\n        this.potentialNodes.forEach(mountNodeEarly);\n        this.potentialNodes.clear();\n      }\n      /**\n       * Write\n       */\n\n\n      this.nodes.forEach(resetTransformStyle);\n      /**\n       * Read ==================\n       */\n      // Update layout measurements of updated children\n\n      this.nodes.forEach(updateLayout);\n      /**\n       * Write\n       */\n      // Notify listeners that the layout is updated\n\n      this.nodes.forEach(notifyLayoutUpdate);\n      this.clearAllSnapshots(); // Flush any scheduled updates\n\n      flushSync.update();\n      flushSync.preRender();\n      flushSync.render();\n    };\n\n    ProjectionNode.prototype.clearAllSnapshots = function () {\n      this.nodes.forEach(clearSnapshot);\n      this.sharedNodes.forEach(removeLeadSnapshots);\n    };\n\n    ProjectionNode.prototype.scheduleUpdateProjection = function () {\n      sync.preRender(this.updateProjection, false, true);\n    };\n\n    ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n      var _this = this;\n      /**\n       * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n       * we manually call didUpdate to give a chance to the siblings to animate.\n       * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n       */\n\n\n      sync.postRender(function () {\n        if (_this.isLayoutDirty) {\n          _this.root.didUpdate();\n        } else {\n          _this.root.checkUpdateFailed();\n        }\n      });\n    };\n    /**\n     * Update measurements\n     */\n\n\n    ProjectionNode.prototype.updateSnapshot = function () {\n      if (this.snapshot || !this.instance) return;\n      var measured = this.measure();\n      var layout = this.removeTransform(this.removeElementScroll(measured));\n      roundBox(layout);\n      this.snapshot = {\n        measured: measured,\n        layout: layout,\n        latestValues: {}\n      };\n    };\n\n    ProjectionNode.prototype.updateLayout = function () {\n      var _a;\n\n      if (!this.instance) return; // TODO: Incorporate into a forwarded scroll offset\n\n      this.updateScroll();\n\n      if (!(this.options.alwaysMeasureLayout && this.isLead()) && !this.isLayoutDirty) {\n        return;\n      }\n      /**\n       * When a node is mounted, it simply resumes from the prevLead's\n       * snapshot instead of taking a new one, but the ancestors scroll\n       * might have updated while the prevLead is unmounted. We need to\n       * update the scroll again to make sure the layout we measure is\n       * up to date.\n       */\n\n\n      if (this.resumeFrom && !this.resumeFrom.instance) {\n        for (var i = 0; i < this.path.length; i++) {\n          var node = this.path[i];\n          node.updateScroll();\n        }\n      }\n\n      var measured = this.measure();\n      roundBox(measured);\n      var prevLayout = this.layout;\n      this.layout = {\n        measured: measured,\n        actual: this.removeElementScroll(measured)\n      };\n      this.layoutCorrected = createBox();\n      this.isLayoutDirty = false;\n      this.projectionDelta = undefined;\n      this.notifyListeners(\"measure\", this.layout.actual);\n      (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n    };\n\n    ProjectionNode.prototype.updateScroll = function () {\n      if (this.options.layoutScroll && this.instance) {\n        this.isScrollRoot = checkIsScrollRoot(this.instance);\n        this.scroll = measureScroll(this.instance);\n      }\n    };\n\n    ProjectionNode.prototype.resetTransform = function () {\n      var _a;\n\n      if (!resetTransform) return;\n      var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n      var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n      var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n      var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n      var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n\n      if (isResetRequested && (hasProjection || hasTransform(this.latestValues) || transformTemplateHasChanged)) {\n        resetTransform(this.instance, transformTemplateValue);\n        this.shouldResetTransform = false;\n        this.scheduleRender();\n      }\n    };\n\n    ProjectionNode.prototype.measure = function () {\n      var visualElement = this.options.visualElement;\n      if (!visualElement) return createBox();\n      var box = visualElement.measureViewportBox(); // Remove viewport scroll to give page-relative coordinates\n\n      var scroll = this.root.scroll;\n\n      if (scroll) {\n        translateAxis(box.x, scroll.x);\n        translateAxis(box.y, scroll.y);\n      }\n\n      return box;\n    };\n\n    ProjectionNode.prototype.removeElementScroll = function (box) {\n      var boxWithoutScroll = createBox();\n      copyBoxInto(boxWithoutScroll, box);\n      /**\n       * Performance TODO: Keep a cumulative scroll offset down the tree\n       * rather than loop back up the path.\n       */\n\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        var scroll_1 = node.scroll,\n            options = node.options,\n            isScrollRoot = node.isScrollRoot;\n\n        if (node !== this.root && scroll_1 && options.layoutScroll) {\n          /**\n           * If this is a new scroll root, we want to remove all previous scrolls\n           * from the viewport box.\n           */\n          if (isScrollRoot) {\n            copyBoxInto(boxWithoutScroll, box);\n            var rootScroll = this.root.scroll;\n            /**\n             * Undo the application of page scroll that was originally added\n             * to the measured bounding box.\n             */\n\n            if (rootScroll) {\n              translateAxis(boxWithoutScroll.x, -rootScroll.x);\n              translateAxis(boxWithoutScroll.y, -rootScroll.y);\n            }\n          }\n\n          translateAxis(boxWithoutScroll.x, scroll_1.x);\n          translateAxis(boxWithoutScroll.y, scroll_1.y);\n        }\n      }\n\n      return boxWithoutScroll;\n    };\n\n    ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n      if (transformOnly === void 0) {\n        transformOnly = false;\n      }\n\n      var withTransforms = createBox();\n      copyBoxInto(withTransforms, box);\n\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n\n        if (!transformOnly && node.options.layoutScroll && node.scroll && node !== node.root) {\n          transformBox(withTransforms, {\n            x: -node.scroll.x,\n            y: -node.scroll.y\n          });\n        }\n\n        if (!hasTransform(node.latestValues)) continue;\n        transformBox(withTransforms, node.latestValues);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        transformBox(withTransforms, this.latestValues);\n      }\n\n      return withTransforms;\n    };\n\n    ProjectionNode.prototype.removeTransform = function (box) {\n      var _a;\n\n      var boxWithoutTransform = createBox();\n      copyBoxInto(boxWithoutTransform, box);\n\n      for (var i = 0; i < this.path.length; i++) {\n        var node = this.path[i];\n        if (!node.instance) continue;\n        if (!hasTransform(node.latestValues)) continue;\n        hasScale(node.latestValues) && node.updateSnapshot();\n        var sourceBox = createBox();\n        var nodeBox = node.measure();\n        copyBoxInto(sourceBox, nodeBox);\n        removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n      }\n\n      if (hasTransform(this.latestValues)) {\n        removeBoxTransforms(boxWithoutTransform, this.latestValues);\n      }\n\n      return boxWithoutTransform;\n    };\n    /**\n     *\n     */\n\n\n    ProjectionNode.prototype.setTargetDelta = function (delta) {\n      this.targetDelta = delta;\n      this.root.scheduleUpdateProjection();\n    };\n\n    ProjectionNode.prototype.setOptions = function (options) {\n      var _a;\n\n      this.options = __assign(__assign(__assign({}, this.options), options), {\n        crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true\n      });\n    };\n\n    ProjectionNode.prototype.clearMeasurements = function () {\n      this.scroll = undefined;\n      this.layout = undefined;\n      this.snapshot = undefined;\n      this.prevTransformTemplateValue = undefined;\n      this.targetDelta = undefined;\n      this.target = undefined;\n      this.isLayoutDirty = false;\n    };\n    /**\n     * Frame calculations\n     */\n\n\n    ProjectionNode.prototype.resolveTargetDelta = function () {\n      var _a;\n\n      var _b = this.options,\n          layout = _b.layout,\n          layoutId = _b.layoutId;\n      /**\n       * If we have no layout, we can't perform projection, so early return\n       */\n\n      if (!this.layout || !(layout || layoutId)) return;\n      /**\n       * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n       * a relativeParent. This will allow a component to perform scale correction\n       * even if no animation has started.\n       */\n      // TODO If this is unsuccessful this currently happens every frame\n\n      if (!this.targetDelta && !this.relativeTarget) {\n        // TODO: This is a semi-repetition of further down this function, make DRY\n        this.relativeParent = this.getClosestProjectingParent();\n\n        if (this.relativeParent && this.relativeParent.layout) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n      /**\n       * If we have no relative target or no target delta our target isn't valid\n       * for this frame.\n       */\n\n\n      if (!this.relativeTarget && !this.targetDelta) return;\n      /**\n       * Lazy-init target data structure\n       */\n\n      if (!this.target) {\n        this.target = createBox();\n        this.targetWithTransforms = createBox();\n      }\n      /**\n       * If we've got a relative box for this component, resolve it into a target relative to the parent.\n       */\n\n\n      if (this.relativeTarget && this.relativeTargetOrigin && ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n        calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n        /**\n         * If we've only got a targetDelta, resolve it into a target\n         */\n      } else if (this.targetDelta) {\n        if (Boolean(this.resumingFrom)) {\n          // TODO: This is creating a new object every frame\n          this.target = this.applyTransform(this.layout.actual);\n        } else {\n          copyBoxInto(this.target, this.layout.actual);\n        }\n\n        applyBoxDelta(this.target, this.targetDelta);\n      } else {\n        /**\n         * If no target, use own layout as target\n         */\n        copyBoxInto(this.target, this.layout.actual);\n      }\n      /**\n       * If we've been told to attempt to resolve a relative target, do so.\n       */\n\n\n      if (this.attemptToResolveRelativeTarget) {\n        this.attemptToResolveRelativeTarget = false;\n        this.relativeParent = this.getClosestProjectingParent();\n\n        if (this.relativeParent && Boolean(this.relativeParent.resumingFrom) === Boolean(this.resumingFrom) && !this.relativeParent.options.layoutScroll && this.relativeParent.target) {\n          this.relativeTarget = createBox();\n          this.relativeTargetOrigin = createBox();\n          calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n          copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n        }\n      }\n    };\n\n    ProjectionNode.prototype.getClosestProjectingParent = function () {\n      if (!this.parent || hasTransform(this.parent.latestValues)) return undefined;\n\n      if ((this.parent.relativeTarget || this.parent.targetDelta) && this.parent.layout) {\n        return this.parent;\n      } else {\n        return this.parent.getClosestProjectingParent();\n      }\n    };\n\n    ProjectionNode.prototype.calcProjection = function () {\n      var _a;\n\n      var _b = this.options,\n          layout = _b.layout,\n          layoutId = _b.layoutId;\n      /**\n       * If this section of the tree isn't animating we can\n       * delete our target sources for the following frame.\n       */\n\n      this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) || this.currentAnimation || this.pendingAnimation);\n\n      if (!this.isTreeAnimating) {\n        this.targetDelta = this.relativeTarget = undefined;\n      }\n\n      if (!this.layout || !(layout || layoutId)) return;\n      var lead = this.getLead();\n      /**\n       * Reset the corrected box with the latest values from box, as we're then going\n       * to perform mutative operations on it.\n       */\n\n      copyBoxInto(this.layoutCorrected, this.layout.actual);\n      /**\n       * Apply all the parent deltas to this box to produce the corrected box. This\n       * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n       */\n\n      applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n      var target = lead.target;\n      if (!target) return;\n\n      if (!this.projectionDelta) {\n        this.projectionDelta = createDelta();\n        this.projectionDeltaWithTransform = createDelta();\n      }\n\n      var prevTreeScaleX = this.treeScale.x;\n      var prevTreeScaleY = this.treeScale.y;\n      var prevProjectionTransform = this.projectionTransform;\n      /**\n       * Update the delta between the corrected box and the target box before user-set transforms were applied.\n       * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n       * for our layout reprojection, but still allow them to be scaled correctly by the user.\n       * It might be that to simplify this we may want to accept that user-set scale is also corrected\n       * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n       * to allow people to choose whether these styles are corrected based on just the\n       * layout reprojection or the final bounding box.\n       */\n\n      calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n      this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n\n      if (this.projectionTransform !== prevProjectionTransform || this.treeScale.x !== prevTreeScaleX || this.treeScale.y !== prevTreeScaleY) {\n        this.hasProjected = true;\n        this.scheduleRender();\n        this.notifyListeners(\"projectionUpdate\", target);\n      }\n    };\n\n    ProjectionNode.prototype.hide = function () {\n      this.isVisible = false; // TODO: Schedule render\n    };\n\n    ProjectionNode.prototype.show = function () {\n      this.isVisible = true; // TODO: Schedule render\n    };\n\n    ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n      var _a, _b, _c;\n\n      if (notifyAll === void 0) {\n        notifyAll = true;\n      }\n\n      (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n      notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n\n      if (this.resumingFrom && !this.resumingFrom.instance) {\n        this.resumingFrom = undefined;\n      }\n    };\n\n    ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n      var _this = this;\n\n      var _a;\n\n      if (hasOnlyRelativeTargetChanged === void 0) {\n        hasOnlyRelativeTargetChanged = false;\n      }\n\n      var snapshot = this.snapshot;\n      var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n\n      var mixedValues = __assign({}, this.latestValues);\n\n      var targetDelta = createDelta();\n      this.relativeTarget = this.relativeTargetOrigin = undefined;\n      this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n      var relativeLayout = createBox();\n      var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n      var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n      var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation && !isOnlyMember && this.options.crossfade === true && !this.path.some(hasOpacityCrossfade));\n      this.animationProgress = 0;\n\n      this.mixTargetDelta = function (latest) {\n        var _a;\n\n        var progress = latest / 1000;\n        mixAxisDelta(targetDelta.x, delta.x, progress);\n        mixAxisDelta(targetDelta.y, delta.y, progress);\n\n        _this.setTargetDelta(targetDelta);\n\n        if (_this.relativeTarget && _this.relativeTargetOrigin && _this.layout && ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n          calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n          mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n        }\n\n        if (isSharedLayoutAnimation) {\n          _this.animationValues = mixedValues;\n          mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n        }\n\n        _this.root.scheduleUpdateProjection();\n\n        _this.scheduleRender();\n\n        _this.animationProgress = progress;\n      };\n\n      this.mixTargetDelta(0);\n    };\n\n    ProjectionNode.prototype.startAnimation = function (options) {\n      var _this = this;\n\n      var _a, _b;\n\n      this.notifyListeners(\"animationStart\");\n      (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n\n      if (this.resumingFrom) {\n        (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n      }\n\n      if (this.pendingAnimation) {\n        cancelSync.update(this.pendingAnimation);\n        this.pendingAnimation = undefined;\n      }\n      /**\n       * Start the animation in the next frame to have a frame with progress 0,\n       * where the target is the same as when the animation started, so we can\n       * calculate the relative positions correctly for instant transitions.\n       */\n\n\n      this.pendingAnimation = sync.update(function () {\n        globalProjectionState.hasAnimatedSinceResize = true;\n        _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), {\n          onUpdate: function (latest) {\n            var _a;\n\n            _this.mixTargetDelta(latest);\n\n            (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n          },\n          onComplete: function () {\n            var _a;\n\n            (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n\n            _this.completeAnimation();\n          }\n        }));\n\n        if (_this.resumingFrom) {\n          _this.resumingFrom.currentAnimation = _this.currentAnimation;\n        }\n\n        _this.pendingAnimation = undefined;\n      });\n    };\n\n    ProjectionNode.prototype.completeAnimation = function () {\n      var _a;\n\n      if (this.resumingFrom) {\n        this.resumingFrom.currentAnimation = undefined;\n        this.resumingFrom.preserveOpacity = undefined;\n      }\n\n      (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n      this.resumingFrom = this.currentAnimation = this.animationValues = undefined;\n      this.notifyListeners(\"animationComplete\");\n    };\n\n    ProjectionNode.prototype.finishAnimation = function () {\n      var _a;\n\n      if (this.currentAnimation) {\n        (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n        this.currentAnimation.stop();\n      }\n\n      this.completeAnimation();\n    };\n\n    ProjectionNode.prototype.applyTransformsToTarget = function () {\n      var _a = this.getLead(),\n          targetWithTransforms = _a.targetWithTransforms,\n          target = _a.target,\n          layout = _a.layout,\n          latestValues = _a.latestValues;\n\n      if (!targetWithTransforms || !target || !layout) return;\n      copyBoxInto(targetWithTransforms, target);\n      /**\n       * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n       * This is the final box that we will then project into by calculating a transform delta and\n       * applying it to the corrected box.\n       */\n\n      transformBox(targetWithTransforms, latestValues);\n      /**\n       * Update the delta between the corrected box and the final target box, after\n       * user-set transforms are applied to it. This will be used by the renderer to\n       * create a transform style that will reproject the element from its actual layout\n       * into the desired bounding box.\n       */\n\n      calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n    };\n\n    ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n      var _a, _b, _c;\n\n      if (!this.sharedNodes.has(layoutId)) {\n        this.sharedNodes.set(layoutId, new NodeStack());\n      }\n\n      var stack = this.sharedNodes.get(layoutId);\n      stack.add(node);\n      node.promote({\n        transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n        preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node)\n      });\n    };\n\n    ProjectionNode.prototype.isLead = function () {\n      var stack = this.getStack();\n      return stack ? stack.lead === this : true;\n    };\n\n    ProjectionNode.prototype.getLead = function () {\n      var _a;\n\n      var layoutId = this.options.layoutId;\n      return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n    };\n\n    ProjectionNode.prototype.getPrevLead = function () {\n      var _a;\n\n      var layoutId = this.options.layoutId;\n      return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n    };\n\n    ProjectionNode.prototype.getStack = function () {\n      var layoutId = this.options.layoutId;\n      if (layoutId) return this.root.sharedNodes.get(layoutId);\n    };\n\n    ProjectionNode.prototype.promote = function (_a) {\n      var _b = _a === void 0 ? {} : _a,\n          needsReset = _b.needsReset,\n          transition = _b.transition,\n          preserveFollowOpacity = _b.preserveFollowOpacity;\n\n      var stack = this.getStack();\n      if (stack) stack.promote(this, preserveFollowOpacity);\n\n      if (needsReset) {\n        this.projectionDelta = undefined;\n        this.needsReset = true;\n      }\n\n      if (transition) this.setOptions({\n        transition: transition\n      });\n    };\n\n    ProjectionNode.prototype.relegate = function () {\n      var stack = this.getStack();\n\n      if (stack) {\n        return stack.relegate(this);\n      } else {\n        return false;\n      }\n    };\n\n    ProjectionNode.prototype.resetRotation = function () {\n      var visualElement = this.options.visualElement;\n      if (!visualElement) return; // If there's no detected rotation values, we can early return without a forced render.\n\n      var hasRotate = false; // Keep a record of all the values we've reset\n\n      var resetValues = {}; // Check the rotate value of all axes and reset to 0\n\n      for (var i = 0; i < transformAxes.length; i++) {\n        var axis = transformAxes[i];\n        var key = \"rotate\" + axis; // If this rotation doesn't exist as a motion value, then we don't\n        // need to reset it\n\n        if (!visualElement.getStaticValue(key)) {\n          continue;\n        }\n\n        hasRotate = true; // Record the rotation and then temporarily set it to 0\n\n        resetValues[key] = visualElement.getStaticValue(key);\n        visualElement.setStaticValue(key, 0);\n      } // If there's no rotation values, we don't need to do any more.\n\n\n      if (!hasRotate) return; // Force a render of this element to apply the transform with all rotations\n      // set to 0.\n\n      visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender(); // Put back all the values we reset\n\n      for (var key in resetValues) {\n        visualElement.setStaticValue(key, resetValues[key]);\n      } // Schedule a render for the next frame. This ensures we won't visually\n      // see the element with the reset rotate value applied.\n\n\n      visualElement.scheduleRender();\n    };\n\n    ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n      var _a, _b, _c, _d, _e, _f;\n\n      if (styleProp === void 0) {\n        styleProp = {};\n      } // TODO: Return lifecycle-persistent object\n\n\n      var styles = {};\n      if (!this.instance || this.isSVG) return styles;\n\n      if (!this.isVisible) {\n        return {\n          visibility: \"hidden\"\n        };\n      } else {\n        styles.visibility = \"\";\n      }\n\n      var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n\n      if (this.needsReset) {\n        this.needsReset = false;\n        styles.opacity = \"\";\n        styles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        styles.transform = transformTemplate ? transformTemplate(this.latestValues, \"\") : \"none\";\n        return styles;\n      }\n\n      var lead = this.getLead();\n\n      if (!this.projectionDelta || !this.layout || !lead.target) {\n        var emptyStyles = {};\n\n        if (this.options.layoutId) {\n          emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n          emptyStyles.pointerEvents = resolveMotionValue(styleProp.pointerEvents) || \"\";\n        }\n\n        if (this.hasProjected && !hasTransform(this.latestValues)) {\n          emptyStyles.transform = transformTemplate ? transformTemplate({}, \"\") : \"none\";\n          this.hasProjected = false;\n        }\n\n        return emptyStyles;\n      }\n\n      var valuesToRender = lead.animationValues || lead.latestValues;\n      this.applyTransformsToTarget();\n      styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n\n      if (transformTemplate) {\n        styles.transform = transformTemplate(valuesToRender, styles.transform);\n      }\n\n      var _g = this.projectionDelta,\n          x = _g.x,\n          y = _g.y;\n      styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n\n      if (lead.animationValues) {\n        /**\n         * If the lead component is animating, assign this either the entering/leaving\n         * opacity\n         */\n        styles.opacity = lead === this ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1 : this.preserveOpacity ? this.latestValues.opacity : valuesToRender.opacityExit;\n      } else {\n        /**\n         * Or we're not animating at all, set the lead component to its actual\n         * opacity and other components to hidden.\n         */\n        styles.opacity = lead === this ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\" : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n      }\n      /**\n       * Apply scale correction\n       */\n\n\n      for (var key in scaleCorrectors) {\n        if (valuesToRender[key] === undefined) continue;\n        var _h = scaleCorrectors[key],\n            correct = _h.correct,\n            applyTo = _h.applyTo;\n        var corrected = correct(valuesToRender[key], lead);\n\n        if (applyTo) {\n          var num = applyTo.length;\n\n          for (var i = 0; i < num; i++) {\n            styles[applyTo[i]] = corrected;\n          }\n        } else {\n          styles[key] = corrected;\n        }\n      }\n      /**\n       * Disable pointer events on follow components. This is to ensure\n       * that if a follow component covers a lead component it doesn't block\n       * pointer events on the lead.\n       */\n\n\n      if (this.options.layoutId) {\n        styles.pointerEvents = lead === this ? resolveMotionValue(styleProp.pointerEvents) || \"\" : \"none\";\n      }\n\n      return styles;\n    };\n\n    ProjectionNode.prototype.clearSnapshot = function () {\n      this.resumeFrom = this.snapshot = undefined;\n    }; // Only run on root\n\n\n    ProjectionNode.prototype.resetTree = function () {\n      this.root.nodes.forEach(function (node) {\n        var _a;\n\n        return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n      });\n      this.root.nodes.forEach(clearMeasurements);\n      this.root.sharedNodes.clear();\n    };\n\n    return ProjectionNode;\n  }();\n}\n\nfunction updateLayout(node) {\n  node.updateLayout();\n}\n\nfunction notifyLayoutUpdate(node) {\n  var _a, _b, _c, _d;\n\n  var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n\n  if (node.isLead() && node.layout && snapshot && node.hasListeners(\"didUpdate\")) {\n    var _e = node.layout,\n        layout_1 = _e.actual,\n        measuredLayout = _e.measured; // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n    // animations for instance if layout=\"size\" and an element has only changed position\n\n    if (node.options.animationType === \"size\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(axisSnapshot);\n        axisSnapshot.min = layout_1[axis].min;\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    } else if (node.options.animationType === \"position\") {\n      eachAxis(function (axis) {\n        var axisSnapshot = snapshot.isShared ? snapshot.measured[axis] : snapshot.layout[axis];\n        var length = calcLength(layout_1[axis]);\n        axisSnapshot.max = axisSnapshot.min + length;\n      });\n    }\n\n    var layoutDelta = createDelta();\n    calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n    var visualDelta = createDelta();\n\n    if (snapshot.isShared) {\n      calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n    } else {\n      calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n    }\n\n    var hasLayoutChanged = !isDeltaZero(layoutDelta);\n    var hasRelativeTargetChanged = false;\n\n    if (!node.resumeFrom) {\n      node.relativeParent = node.getClosestProjectingParent();\n      /**\n       * If the relativeParent is itself resuming from a different element then\n       * the relative snapshot is not relavent\n       */\n\n      if (node.relativeParent && !node.relativeParent.resumeFrom) {\n        var _f = node.relativeParent,\n            parentSnapshot = _f.snapshot,\n            parentLayout = _f.layout;\n\n        if (parentSnapshot && parentLayout) {\n          var relativeSnapshot = createBox();\n          calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n          var relativeLayout = createBox();\n          calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n\n          if (!boxEquals(relativeSnapshot, relativeLayout)) {\n            hasRelativeTargetChanged = true;\n          }\n        }\n      }\n    }\n\n    node.notifyListeners(\"didUpdate\", {\n      layout: layout_1,\n      snapshot: snapshot,\n      delta: visualDelta,\n      layoutDelta: layoutDelta,\n      hasLayoutChanged: hasLayoutChanged,\n      hasRelativeTargetChanged: hasRelativeTargetChanged\n    });\n  } else if (node.isLead()) {\n    (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n  }\n  /**\n   * Clearing transition\n   * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n   * and why we need it at all\n   */\n\n\n  node.options.transition = undefined;\n}\n\nfunction clearSnapshot(node) {\n  node.clearSnapshot();\n}\n\nfunction clearMeasurements(node) {\n  node.clearMeasurements();\n}\n\nfunction resetTransformStyle(node) {\n  var visualElement = node.options.visualElement;\n\n  if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n    visualElement.notifyBeforeLayoutMeasure();\n  }\n\n  node.resetTransform();\n}\n\nfunction finishAnimation(node) {\n  node.finishAnimation();\n  node.targetDelta = node.relativeTarget = node.target = undefined;\n}\n\nfunction resolveTargetDelta(node) {\n  node.resolveTargetDelta();\n}\n\nfunction calcProjection(node) {\n  node.calcProjection();\n}\n\nfunction resetRotation(node) {\n  node.resetRotation();\n}\n\nfunction removeLeadSnapshots(stack) {\n  stack.removeLeadSnapshot();\n}\n\nfunction mixAxisDelta(output, delta, p) {\n  output.translate = mix(delta.translate, 0, p);\n  output.scale = mix(delta.scale, 1, p);\n  output.origin = delta.origin;\n  output.originPoint = delta.originPoint;\n}\n\nfunction mixAxis(output, from, to, p) {\n  output.min = mix(from.min, to.min, p);\n  output.max = mix(from.max, to.max, p);\n}\n\nfunction mixBox(output, from, to, p) {\n  mixAxis(output.x, from.x, to.x, p);\n  mixAxis(output.y, from.y, to.y, p);\n}\n\nfunction hasOpacityCrossfade(node) {\n  return node.animationValues && node.animationValues.opacityExit !== undefined;\n}\n\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\n\nfunction mountNodeEarly(node, id) {\n  /**\n   * Rather than searching the DOM from document we can search the\n   * path for the deepest mounted ancestor and search from there\n   */\n  var searchNode = node.root;\n\n  for (var i = node.path.length - 1; i >= 0; i--) {\n    if (Boolean(node.path[i].instance)) {\n      searchNode = node.path[i];\n      break;\n    }\n  }\n\n  var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n  var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n  if (element) node.mount(element, true);\n}\n\nfunction roundAxis(axis) {\n  axis.min = Math.round(axis.min);\n  axis.max = Math.round(axis.max);\n}\n\nfunction roundBox(box) {\n  roundAxis(box.x);\n  roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };","map":{"version":3,"sources":["C:/Users/daman/Desktop/Final Project/gadgetopia/frontend/node_modules/framer-motion/dist/es/projection/node/create-projection-node.mjs"],"names":["__spreadArray","__read","__assign","sync","cancelSync","flushSync","mix","animate","SubscriptionManager","mixValues","copyBoxInto","translateAxis","transformBox","applyBoxDelta","applyTreeDeltas","calcRelativePosition","calcRelativeBox","calcBoxDelta","calcLength","removeBoxTransforms","createBox","createDelta","getValueTransition","boxEquals","isDeltaZero","NodeStack","scaleCorrectors","buildProjectionTransform","eachAxis","hasTransform","hasScale","transformAxes","FlatTree","resolveMotionValue","globalProjectionState","animationTarget","createProjectionNode","_a","attachResizeListener","defaultParent","measureScroll","checkIsScrollRoot","resetTransform","ProjectionNode","id","latestValues","parent","_this","children","Set","options","isTreeAnimating","isAnimationBlocked","isLayoutDirty","updateManuallyBlocked","updateBlockedByResize","isUpdating","isSVG","needsReset","shouldResetTransform","treeScale","x","y","eventHandlers","Map","potentialNodes","checkUpdateFailed","clearAllSnapshots","updateProjection","nodes","forEach","resolveTargetDelta","calcProjection","hasProjected","isVisible","animationProgress","sharedNodes","root","path","depth","registerPotentialNode","i","length","prototype","addEventListener","name","handler","has","set","get","add","notifyListeners","args","_i","arguments","subscriptionManager","notify","apply","hasListeners","node","mount","instance","SVGElement","tagName","_b","layoutId","layout","visualElement","getInstance","delete","unblockTimeout_1","resizeUnblockUpdate_1","clearTimeout","window","setTimeout","hasAnimatedSinceResize","finishAnimation","registerSharedNode","_c","_d","_e","_f","delta","hasLayoutChanged","hasRelativeTargetChanged","newLayout","isTreeAnimationBlocked","target","undefined","relativeTarget","layoutTransition","transition","getDefaultTransition","defaultLayoutTransition","_g","getProps","onLayoutAnimationStart","onLayoutAnimationComplete","targetChanged","targetLayout","hasOnlyRelativeTargetChanged","resumeFrom","currentAnimation","resumingFrom","setAnimationOrigin","animationOptions","onPlay","onComplete","shouldReduceMotion","delay","type","startAnimation","isLead","onExitComplete","call","unmount","willUpdate","remove","getStack","preRender","blockUpdate","unblockUpdate","isUpdateBlocked","startUpdate","resetRotation","shouldNotifyListeners","updateScroll","transformTemplate","prevTransformTemplateValue","updateSnapshot","didUpdate","updateWasBlocked","clearMeasurements","size","mountNodeEarly","clear","resetTransformStyle","updateLayout","notifyLayoutUpdate","update","render","clearSnapshot","removeLeadSnapshots","scheduleUpdateProjection","scheduleCheckAfterUnmount","postRender","snapshot","measured","measure","removeTransform","removeElementScroll","roundBox","alwaysMeasureLayout","prevLayout","actual","layoutCorrected","projectionDelta","notifyLayoutMeasure","layoutScroll","isScrollRoot","scroll","isResetRequested","hasProjection","transformTemplateValue","transformTemplateHasChanged","scheduleRender","box","measureViewportBox","boxWithoutScroll","scroll_1","rootScroll","applyTransform","transformOnly","withTransforms","boxWithoutTransform","sourceBox","nodeBox","setTargetDelta","targetDelta","setOptions","crossfade","relativeParent","getClosestProjectingParent","relativeTargetOrigin","targetWithTransforms","Boolean","attemptToResolveRelativeTarget","pendingAnimation","lead","getLead","projectionDeltaWithTransform","prevTreeScaleX","prevTreeScaleY","prevProjectionTransform","projectionTransform","hide","show","notifyAll","snapshotLatestValues","mixedValues","relativeLayout","isSharedLayoutAnimation","isShared","isOnlyMember","members","shouldCrossfadeOpacity","some","hasOpacityCrossfade","mixTargetDelta","latest","progress","mixAxisDelta","mixBox","animationValues","stop","onUpdate","completeAnimation","preserveOpacity","exitAnimationComplete","applyTransformsToTarget","stack","promote","initialPromotionConfig","preserveFollowOpacity","shouldPreserveFollowOpacity","getPrevLead","prevLead","relegate","hasRotate","resetValues","axis","key","getStaticValue","setStaticValue","syncRender","getProjectionStyles","styleProp","styles","visibility","opacity","pointerEvents","transform","emptyStyles","valuesToRender","transformOrigin","concat","origin","opacityExit","_h","correct","applyTo","corrected","num","resetTree","layout_1","measuredLayout","animationType","axisSnapshot","min","max","layoutDelta","visualDelta","parentSnapshot","parentLayout","relativeSnapshot","onBeforeLayoutMeasure","notifyBeforeLayoutMeasure","removeLeadSnapshot","output","p","translate","scale","originPoint","mixAxis","from","to","duration","ease","searchNode","searchElement","document","element","querySelector","roundAxis","Math","round"],"mappings":"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","sourcesContent":["import { __spreadArray, __read, __assign } from 'tslib';\nimport sync, { cancelSync, flushSync } from 'framesync';\nimport { mix } from 'popmotion';\nimport { animate } from '../../animation/animate.mjs';\nimport { SubscriptionManager } from '../../utils/subscription-manager.mjs';\nimport { mixValues } from '../animation/mix-values.mjs';\nimport { copyBoxInto } from '../geometry/copy.mjs';\nimport { translateAxis, transformBox, applyBoxDelta, applyTreeDeltas } from '../geometry/delta-apply.mjs';\nimport { calcRelativePosition, calcRelativeBox, calcBoxDelta, calcLength } from '../geometry/delta-calc.mjs';\nimport { removeBoxTransforms } from '../geometry/delta-remove.mjs';\nimport { createBox, createDelta } from '../geometry/models.mjs';\nimport { getValueTransition } from '../../animation/utils/transitions.mjs';\nimport { boxEquals, isDeltaZero } from '../geometry/utils.mjs';\nimport { NodeStack } from '../shared/stack.mjs';\nimport { scaleCorrectors } from '../styles/scale-correction.mjs';\nimport { buildProjectionTransform } from '../styles/transform.mjs';\nimport { eachAxis } from '../utils/each-axis.mjs';\nimport { hasTransform, hasScale } from '../utils/has-transform.mjs';\nimport { transformAxes } from '../../render/html/utils/transform.mjs';\nimport { FlatTree } from '../../render/utils/flat-tree.mjs';\nimport { resolveMotionValue } from '../../value/utils/resolve-motion-value.mjs';\nimport { globalProjectionState } from './state.mjs';\n\n/**\n * We use 1000 as the animation target as 0-1000 maps better to pixels than 0-1\n * which has a noticeable difference in spring animations\n */\nvar animationTarget = 1000;\nfunction createProjectionNode(_a) {\n    var attachResizeListener = _a.attachResizeListener, defaultParent = _a.defaultParent, measureScroll = _a.measureScroll, checkIsScrollRoot = _a.checkIsScrollRoot, resetTransform = _a.resetTransform;\n    return /** @class */ (function () {\n        function ProjectionNode(id, latestValues, parent) {\n            var _this = this;\n            if (latestValues === void 0) { latestValues = {}; }\n            if (parent === void 0) { parent = defaultParent === null || defaultParent === void 0 ? void 0 : defaultParent(); }\n            /**\n             * A Set containing all this component's children. This is used to iterate\n             * through the children.\n             *\n             * TODO: This could be faster to iterate as a flat array stored on the root node.\n             */\n            this.children = new Set();\n            /**\n             * Options for the node. We use this to configure what kind of layout animations\n             * we should perform (if any).\n             */\n            this.options = {};\n            /**\n             * We use this to detect when its safe to shut down part of a projection tree.\n             * We have to keep projecting children for scale correction and relative projection\n             * until all their parents stop performing layout animations.\n             */\n            this.isTreeAnimating = false;\n            this.isAnimationBlocked = false;\n            /**\n             * Flag to true if we think this layout has been changed. We can't always know this,\n             * currently we set it to true every time a component renders, or if it has a layoutDependency\n             * if that has changed between renders. Additionally, components can be grouped by LayoutGroup\n             * and if one node is dirtied, they all are.\n             */\n            this.isLayoutDirty = false;\n            /**\n             * Block layout updates for instant layout transitions throughout the tree.\n             */\n            this.updateManuallyBlocked = false;\n            this.updateBlockedByResize = false;\n            /**\n             * Set to true between the start of the first `willUpdate` call and the end of the `didUpdate`\n             * call.\n             */\n            this.isUpdating = false;\n            /**\n             * If this is an SVG element we currently disable projection transforms\n             */\n            this.isSVG = false;\n            /**\n             * Flag to true (during promotion) if a node doing an instant layout transition needs to reset\n             * its projection styles.\n             */\n            this.needsReset = false;\n            /**\n             * Flags whether this node should have its transform reset prior to measuring.\n             */\n            this.shouldResetTransform = false;\n            /**\n             * An object representing the calculated contextual/accumulated/tree scale.\n             * This will be used to scale calculcated projection transforms, as these are\n             * calculated in screen-space but need to be scaled for elements to actually\n             * make it to their calculated destinations.\n             *\n             * TODO: Lazy-init\n             */\n            this.treeScale = { x: 1, y: 1 };\n            /**\n             *\n             */\n            this.eventHandlers = new Map();\n            // Note: Currently only running on root node\n            this.potentialNodes = new Map();\n            this.checkUpdateFailed = function () {\n                if (_this.isUpdating) {\n                    _this.isUpdating = false;\n                    _this.clearAllSnapshots();\n                }\n            };\n            this.updateProjection = function () {\n                _this.nodes.forEach(resolveTargetDelta);\n                _this.nodes.forEach(calcProjection);\n            };\n            this.hasProjected = false;\n            this.isVisible = true;\n            this.animationProgress = 0;\n            /**\n             * Shared layout\n             */\n            // TODO Only running on root node\n            this.sharedNodes = new Map();\n            this.id = id;\n            this.latestValues = latestValues;\n            this.root = parent ? parent.root || parent : this;\n            this.path = parent ? __spreadArray(__spreadArray([], __read(parent.path), false), [parent], false) : [];\n            this.parent = parent;\n            this.depth = parent ? parent.depth + 1 : 0;\n            id && this.root.registerPotentialNode(id, this);\n            for (var i = 0; i < this.path.length; i++) {\n                this.path[i].shouldResetTransform = true;\n            }\n            if (this.root === this)\n                this.nodes = new FlatTree();\n        }\n        ProjectionNode.prototype.addEventListener = function (name, handler) {\n            if (!this.eventHandlers.has(name)) {\n                this.eventHandlers.set(name, new SubscriptionManager());\n            }\n            return this.eventHandlers.get(name).add(handler);\n        };\n        ProjectionNode.prototype.notifyListeners = function (name) {\n            var args = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                args[_i - 1] = arguments[_i];\n            }\n            var subscriptionManager = this.eventHandlers.get(name);\n            subscriptionManager === null || subscriptionManager === void 0 ? void 0 : subscriptionManager.notify.apply(subscriptionManager, __spreadArray([], __read(args), false));\n        };\n        ProjectionNode.prototype.hasListeners = function (name) {\n            return this.eventHandlers.has(name);\n        };\n        ProjectionNode.prototype.registerPotentialNode = function (id, node) {\n            this.potentialNodes.set(id, node);\n        };\n        /**\n         * Lifecycles\n         */\n        ProjectionNode.prototype.mount = function (instance, isLayoutDirty) {\n            var _this = this;\n            var _a;\n            if (isLayoutDirty === void 0) { isLayoutDirty = false; }\n            if (this.instance)\n                return;\n            this.isSVG =\n                instance instanceof SVGElement && instance.tagName !== \"svg\";\n            this.instance = instance;\n            var _b = this.options, layoutId = _b.layoutId, layout = _b.layout, visualElement = _b.visualElement;\n            if (visualElement && !visualElement.getInstance()) {\n                visualElement.mount(instance);\n            }\n            this.root.nodes.add(this);\n            (_a = this.parent) === null || _a === void 0 ? void 0 : _a.children.add(this);\n            this.id && this.root.potentialNodes.delete(this.id);\n            if (isLayoutDirty && (layout || layoutId)) {\n                this.isLayoutDirty = true;\n            }\n            if (attachResizeListener) {\n                var unblockTimeout_1;\n                var resizeUnblockUpdate_1 = function () {\n                    return (_this.root.updateBlockedByResize = false);\n                };\n                attachResizeListener(instance, function () {\n                    _this.root.updateBlockedByResize = true;\n                    clearTimeout(unblockTimeout_1);\n                    unblockTimeout_1 = window.setTimeout(resizeUnblockUpdate_1, 250);\n                    if (globalProjectionState.hasAnimatedSinceResize) {\n                        globalProjectionState.hasAnimatedSinceResize = false;\n                        _this.nodes.forEach(finishAnimation);\n                    }\n                });\n            }\n            if (layoutId) {\n                this.root.registerSharedNode(layoutId, this);\n            }\n            // Only register the handler if it requires layout animation\n            if (this.options.animate !== false &&\n                visualElement &&\n                (layoutId || layout)) {\n                this.addEventListener(\"didUpdate\", function (_a) {\n                    var _b, _c, _d, _e, _f;\n                    var delta = _a.delta, hasLayoutChanged = _a.hasLayoutChanged, hasRelativeTargetChanged = _a.hasRelativeTargetChanged, newLayout = _a.layout;\n                    if (_this.isTreeAnimationBlocked()) {\n                        _this.target = undefined;\n                        _this.relativeTarget = undefined;\n                        return;\n                    }\n                    // TODO: Check here if an animation exists\n                    var layoutTransition = (_c = (_b = _this.options.transition) !== null && _b !== void 0 ? _b : visualElement.getDefaultTransition()) !== null && _c !== void 0 ? _c : defaultLayoutTransition;\n                    var _g = visualElement.getProps(), onLayoutAnimationStart = _g.onLayoutAnimationStart, onLayoutAnimationComplete = _g.onLayoutAnimationComplete;\n                    /**\n                     * The target layout of the element might stay the same,\n                     * but its position relative to its parent has changed.\n                     */\n                    var targetChanged = !_this.targetLayout ||\n                        !boxEquals(_this.targetLayout, newLayout) ||\n                        hasRelativeTargetChanged;\n                    /**\n                     * If the layout hasn't seemed to have changed, it might be that the\n                     * element is visually in the same place in the document but its position\n                     * relative to its parent has indeed changed. So here we check for that.\n                     */\n                    var hasOnlyRelativeTargetChanged = !hasLayoutChanged && hasRelativeTargetChanged;\n                    if (((_d = _this.resumeFrom) === null || _d === void 0 ? void 0 : _d.instance) ||\n                        hasOnlyRelativeTargetChanged ||\n                        (hasLayoutChanged &&\n                            (targetChanged || !_this.currentAnimation))) {\n                        if (_this.resumeFrom) {\n                            _this.resumingFrom = _this.resumeFrom;\n                            _this.resumingFrom.resumingFrom = undefined;\n                        }\n                        _this.setAnimationOrigin(delta, hasOnlyRelativeTargetChanged);\n                        var animationOptions = __assign(__assign({}, getValueTransition(layoutTransition, \"layout\")), { onPlay: onLayoutAnimationStart, onComplete: onLayoutAnimationComplete });\n                        if (visualElement.shouldReduceMotion) {\n                            animationOptions.delay = 0;\n                            animationOptions.type = false;\n                        }\n                        _this.startAnimation(animationOptions);\n                    }\n                    else {\n                        /**\n                         * If the layout hasn't changed and we have an animation that hasn't started yet,\n                         * finish it immediately. Otherwise it will be animating from a location\n                         * that was probably never commited to screen and look like a jumpy box.\n                         */\n                        if (!hasLayoutChanged &&\n                            _this.animationProgress === 0) {\n                            _this.finishAnimation();\n                        }\n                        _this.isLead() && ((_f = (_e = _this.options).onExitComplete) === null || _f === void 0 ? void 0 : _f.call(_e));\n                    }\n                    _this.targetLayout = newLayout;\n                });\n            }\n        };\n        ProjectionNode.prototype.unmount = function () {\n            var _a, _b;\n            this.options.layoutId && this.willUpdate();\n            this.root.nodes.remove(this);\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.remove(this);\n            (_b = this.parent) === null || _b === void 0 ? void 0 : _b.children.delete(this);\n            this.instance = undefined;\n            cancelSync.preRender(this.updateProjection);\n        };\n        // only on the root\n        ProjectionNode.prototype.blockUpdate = function () {\n            this.updateManuallyBlocked = true;\n        };\n        ProjectionNode.prototype.unblockUpdate = function () {\n            this.updateManuallyBlocked = false;\n        };\n        ProjectionNode.prototype.isUpdateBlocked = function () {\n            return this.updateManuallyBlocked || this.updateBlockedByResize;\n        };\n        ProjectionNode.prototype.isTreeAnimationBlocked = function () {\n            var _a;\n            return (this.isAnimationBlocked ||\n                ((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimationBlocked()) ||\n                false);\n        };\n        // Note: currently only running on root node\n        ProjectionNode.prototype.startUpdate = function () {\n            var _a;\n            if (this.isUpdateBlocked())\n                return;\n            this.isUpdating = true;\n            (_a = this.nodes) === null || _a === void 0 ? void 0 : _a.forEach(resetRotation);\n        };\n        ProjectionNode.prototype.willUpdate = function (shouldNotifyListeners) {\n            var _a, _b, _c;\n            if (shouldNotifyListeners === void 0) { shouldNotifyListeners = true; }\n            if (this.root.isUpdateBlocked()) {\n                (_b = (_a = this.options).onExitComplete) === null || _b === void 0 ? void 0 : _b.call(_a);\n                return;\n            }\n            !this.root.isUpdating && this.root.startUpdate();\n            if (this.isLayoutDirty)\n                return;\n            this.isLayoutDirty = true;\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                node.shouldResetTransform = true;\n                /**\n                 * TODO: Check we haven't updated the scroll\n                 * since the last didUpdate\n                 */\n                node.updateScroll();\n            }\n            var _d = this.options, layoutId = _d.layoutId, layout = _d.layout;\n            if (layoutId === undefined && !layout)\n                return;\n            var transformTemplate = (_c = this.options.visualElement) === null || _c === void 0 ? void 0 : _c.getProps().transformTemplate;\n            this.prevTransformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            this.updateSnapshot();\n            shouldNotifyListeners && this.notifyListeners(\"willUpdate\");\n        };\n        // Note: Currently only running on root node\n        ProjectionNode.prototype.didUpdate = function () {\n            var updateWasBlocked = this.isUpdateBlocked();\n            // When doing an instant transition, we skip the layout update,\n            // but should still clean up the measurements so that the next\n            // snapshot could be taken correctly.\n            if (updateWasBlocked) {\n                this.unblockUpdate();\n                this.clearAllSnapshots();\n                this.nodes.forEach(clearMeasurements);\n                return;\n            }\n            if (!this.isUpdating)\n                return;\n            this.isUpdating = false;\n            /**\n             * Search for and mount newly-added projection elements.\n             *\n             * TODO: Every time a new component is rendered we could search up the tree for\n             * the closest mounted node and query from there rather than document.\n             */\n            if (this.potentialNodes.size) {\n                this.potentialNodes.forEach(mountNodeEarly);\n                this.potentialNodes.clear();\n            }\n            /**\n             * Write\n             */\n            this.nodes.forEach(resetTransformStyle);\n            /**\n             * Read ==================\n             */\n            // Update layout measurements of updated children\n            this.nodes.forEach(updateLayout);\n            /**\n             * Write\n             */\n            // Notify listeners that the layout is updated\n            this.nodes.forEach(notifyLayoutUpdate);\n            this.clearAllSnapshots();\n            // Flush any scheduled updates\n            flushSync.update();\n            flushSync.preRender();\n            flushSync.render();\n        };\n        ProjectionNode.prototype.clearAllSnapshots = function () {\n            this.nodes.forEach(clearSnapshot);\n            this.sharedNodes.forEach(removeLeadSnapshots);\n        };\n        ProjectionNode.prototype.scheduleUpdateProjection = function () {\n            sync.preRender(this.updateProjection, false, true);\n        };\n        ProjectionNode.prototype.scheduleCheckAfterUnmount = function () {\n            var _this = this;\n            /**\n             * If the unmounting node is in a layoutGroup and did trigger a willUpdate,\n             * we manually call didUpdate to give a chance to the siblings to animate.\n             * Otherwise, cleanup all snapshots to prevents future nodes from reusing them.\n             */\n            sync.postRender(function () {\n                if (_this.isLayoutDirty) {\n                    _this.root.didUpdate();\n                }\n                else {\n                    _this.root.checkUpdateFailed();\n                }\n            });\n        };\n        /**\n         * Update measurements\n         */\n        ProjectionNode.prototype.updateSnapshot = function () {\n            if (this.snapshot || !this.instance)\n                return;\n            var measured = this.measure();\n            var layout = this.removeTransform(this.removeElementScroll(measured));\n            roundBox(layout);\n            this.snapshot = {\n                measured: measured,\n                layout: layout,\n                latestValues: {},\n            };\n        };\n        ProjectionNode.prototype.updateLayout = function () {\n            var _a;\n            if (!this.instance)\n                return;\n            // TODO: Incorporate into a forwarded scroll offset\n            this.updateScroll();\n            if (!(this.options.alwaysMeasureLayout && this.isLead()) &&\n                !this.isLayoutDirty) {\n                return;\n            }\n            /**\n             * When a node is mounted, it simply resumes from the prevLead's\n             * snapshot instead of taking a new one, but the ancestors scroll\n             * might have updated while the prevLead is unmounted. We need to\n             * update the scroll again to make sure the layout we measure is\n             * up to date.\n             */\n            if (this.resumeFrom && !this.resumeFrom.instance) {\n                for (var i = 0; i < this.path.length; i++) {\n                    var node = this.path[i];\n                    node.updateScroll();\n                }\n            }\n            var measured = this.measure();\n            roundBox(measured);\n            var prevLayout = this.layout;\n            this.layout = {\n                measured: measured,\n                actual: this.removeElementScroll(measured),\n            };\n            this.layoutCorrected = createBox();\n            this.isLayoutDirty = false;\n            this.projectionDelta = undefined;\n            this.notifyListeners(\"measure\", this.layout.actual);\n            (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.notifyLayoutMeasure(this.layout.actual, prevLayout === null || prevLayout === void 0 ? void 0 : prevLayout.actual);\n        };\n        ProjectionNode.prototype.updateScroll = function () {\n            if (this.options.layoutScroll && this.instance) {\n                this.isScrollRoot = checkIsScrollRoot(this.instance);\n                this.scroll = measureScroll(this.instance);\n            }\n        };\n        ProjectionNode.prototype.resetTransform = function () {\n            var _a;\n            if (!resetTransform)\n                return;\n            var isResetRequested = this.isLayoutDirty || this.shouldResetTransform;\n            var hasProjection = this.projectionDelta && !isDeltaZero(this.projectionDelta);\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            var transformTemplateValue = transformTemplate === null || transformTemplate === void 0 ? void 0 : transformTemplate(this.latestValues, \"\");\n            var transformTemplateHasChanged = transformTemplateValue !== this.prevTransformTemplateValue;\n            if (isResetRequested &&\n                (hasProjection ||\n                    hasTransform(this.latestValues) ||\n                    transformTemplateHasChanged)) {\n                resetTransform(this.instance, transformTemplateValue);\n                this.shouldResetTransform = false;\n                this.scheduleRender();\n            }\n        };\n        ProjectionNode.prototype.measure = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return createBox();\n            var box = visualElement.measureViewportBox();\n            // Remove viewport scroll to give page-relative coordinates\n            var scroll = this.root.scroll;\n            if (scroll) {\n                translateAxis(box.x, scroll.x);\n                translateAxis(box.y, scroll.y);\n            }\n            return box;\n        };\n        ProjectionNode.prototype.removeElementScroll = function (box) {\n            var boxWithoutScroll = createBox();\n            copyBoxInto(boxWithoutScroll, box);\n            /**\n             * Performance TODO: Keep a cumulative scroll offset down the tree\n             * rather than loop back up the path.\n             */\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                var scroll_1 = node.scroll, options = node.options, isScrollRoot = node.isScrollRoot;\n                if (node !== this.root && scroll_1 && options.layoutScroll) {\n                    /**\n                     * If this is a new scroll root, we want to remove all previous scrolls\n                     * from the viewport box.\n                     */\n                    if (isScrollRoot) {\n                        copyBoxInto(boxWithoutScroll, box);\n                        var rootScroll = this.root.scroll;\n                        /**\n                         * Undo the application of page scroll that was originally added\n                         * to the measured bounding box.\n                         */\n                        if (rootScroll) {\n                            translateAxis(boxWithoutScroll.x, -rootScroll.x);\n                            translateAxis(boxWithoutScroll.y, -rootScroll.y);\n                        }\n                    }\n                    translateAxis(boxWithoutScroll.x, scroll_1.x);\n                    translateAxis(boxWithoutScroll.y, scroll_1.y);\n                }\n            }\n            return boxWithoutScroll;\n        };\n        ProjectionNode.prototype.applyTransform = function (box, transformOnly) {\n            if (transformOnly === void 0) { transformOnly = false; }\n            var withTransforms = createBox();\n            copyBoxInto(withTransforms, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!transformOnly &&\n                    node.options.layoutScroll &&\n                    node.scroll &&\n                    node !== node.root) {\n                    transformBox(withTransforms, {\n                        x: -node.scroll.x,\n                        y: -node.scroll.y,\n                    });\n                }\n                if (!hasTransform(node.latestValues))\n                    continue;\n                transformBox(withTransforms, node.latestValues);\n            }\n            if (hasTransform(this.latestValues)) {\n                transformBox(withTransforms, this.latestValues);\n            }\n            return withTransforms;\n        };\n        ProjectionNode.prototype.removeTransform = function (box) {\n            var _a;\n            var boxWithoutTransform = createBox();\n            copyBoxInto(boxWithoutTransform, box);\n            for (var i = 0; i < this.path.length; i++) {\n                var node = this.path[i];\n                if (!node.instance)\n                    continue;\n                if (!hasTransform(node.latestValues))\n                    continue;\n                hasScale(node.latestValues) && node.updateSnapshot();\n                var sourceBox = createBox();\n                var nodeBox = node.measure();\n                copyBoxInto(sourceBox, nodeBox);\n                removeBoxTransforms(boxWithoutTransform, node.latestValues, (_a = node.snapshot) === null || _a === void 0 ? void 0 : _a.layout, sourceBox);\n            }\n            if (hasTransform(this.latestValues)) {\n                removeBoxTransforms(boxWithoutTransform, this.latestValues);\n            }\n            return boxWithoutTransform;\n        };\n        /**\n         *\n         */\n        ProjectionNode.prototype.setTargetDelta = function (delta) {\n            this.targetDelta = delta;\n            this.root.scheduleUpdateProjection();\n        };\n        ProjectionNode.prototype.setOptions = function (options) {\n            var _a;\n            this.options = __assign(__assign(__assign({}, this.options), options), { crossfade: (_a = options.crossfade) !== null && _a !== void 0 ? _a : true });\n        };\n        ProjectionNode.prototype.clearMeasurements = function () {\n            this.scroll = undefined;\n            this.layout = undefined;\n            this.snapshot = undefined;\n            this.prevTransformTemplateValue = undefined;\n            this.targetDelta = undefined;\n            this.target = undefined;\n            this.isLayoutDirty = false;\n        };\n        /**\n         * Frame calculations\n         */\n        ProjectionNode.prototype.resolveTargetDelta = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If we have no layout, we can't perform projection, so early return\n             */\n            if (!this.layout || !(layout || layoutId))\n                return;\n            /**\n             * If we don't have a targetDelta but do have a layout, we can attempt to resolve\n             * a relativeParent. This will allow a component to perform scale correction\n             * even if no animation has started.\n             */\n            // TODO If this is unsuccessful this currently happens every frame\n            if (!this.targetDelta && !this.relativeTarget) {\n                // TODO: This is a semi-repetition of further down this function, make DRY\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent && this.relativeParent.layout) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.layout.actual, this.relativeParent.layout.actual);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n            /**\n             * If we have no relative target or no target delta our target isn't valid\n             * for this frame.\n             */\n            if (!this.relativeTarget && !this.targetDelta)\n                return;\n            /**\n             * Lazy-init target data structure\n             */\n            if (!this.target) {\n                this.target = createBox();\n                this.targetWithTransforms = createBox();\n            }\n            /**\n             * If we've got a relative box for this component, resolve it into a target relative to the parent.\n             */\n            if (this.relativeTarget &&\n                this.relativeTargetOrigin &&\n                ((_a = this.relativeParent) === null || _a === void 0 ? void 0 : _a.target)) {\n                calcRelativeBox(this.target, this.relativeTarget, this.relativeParent.target);\n                /**\n                 * If we've only got a targetDelta, resolve it into a target\n                 */\n            }\n            else if (this.targetDelta) {\n                if (Boolean(this.resumingFrom)) {\n                    // TODO: This is creating a new object every frame\n                    this.target = this.applyTransform(this.layout.actual);\n                }\n                else {\n                    copyBoxInto(this.target, this.layout.actual);\n                }\n                applyBoxDelta(this.target, this.targetDelta);\n            }\n            else {\n                /**\n                 * If no target, use own layout as target\n                 */\n                copyBoxInto(this.target, this.layout.actual);\n            }\n            /**\n             * If we've been told to attempt to resolve a relative target, do so.\n             */\n            if (this.attemptToResolveRelativeTarget) {\n                this.attemptToResolveRelativeTarget = false;\n                this.relativeParent = this.getClosestProjectingParent();\n                if (this.relativeParent &&\n                    Boolean(this.relativeParent.resumingFrom) ===\n                        Boolean(this.resumingFrom) &&\n                    !this.relativeParent.options.layoutScroll &&\n                    this.relativeParent.target) {\n                    this.relativeTarget = createBox();\n                    this.relativeTargetOrigin = createBox();\n                    calcRelativePosition(this.relativeTargetOrigin, this.target, this.relativeParent.target);\n                    copyBoxInto(this.relativeTarget, this.relativeTargetOrigin);\n                }\n            }\n        };\n        ProjectionNode.prototype.getClosestProjectingParent = function () {\n            if (!this.parent || hasTransform(this.parent.latestValues))\n                return undefined;\n            if ((this.parent.relativeTarget || this.parent.targetDelta) &&\n                this.parent.layout) {\n                return this.parent;\n            }\n            else {\n                return this.parent.getClosestProjectingParent();\n            }\n        };\n        ProjectionNode.prototype.calcProjection = function () {\n            var _a;\n            var _b = this.options, layout = _b.layout, layoutId = _b.layoutId;\n            /**\n             * If this section of the tree isn't animating we can\n             * delete our target sources for the following frame.\n             */\n            this.isTreeAnimating = Boolean(((_a = this.parent) === null || _a === void 0 ? void 0 : _a.isTreeAnimating) ||\n                this.currentAnimation ||\n                this.pendingAnimation);\n            if (!this.isTreeAnimating) {\n                this.targetDelta = this.relativeTarget = undefined;\n            }\n            if (!this.layout || !(layout || layoutId))\n                return;\n            var lead = this.getLead();\n            /**\n             * Reset the corrected box with the latest values from box, as we're then going\n             * to perform mutative operations on it.\n             */\n            copyBoxInto(this.layoutCorrected, this.layout.actual);\n            /**\n             * Apply all the parent deltas to this box to produce the corrected box. This\n             * is the layout box, as it will appear on screen as a result of the transforms of its parents.\n             */\n            applyTreeDeltas(this.layoutCorrected, this.treeScale, this.path, Boolean(this.resumingFrom) || this !== lead);\n            var target = lead.target;\n            if (!target)\n                return;\n            if (!this.projectionDelta) {\n                this.projectionDelta = createDelta();\n                this.projectionDeltaWithTransform = createDelta();\n            }\n            var prevTreeScaleX = this.treeScale.x;\n            var prevTreeScaleY = this.treeScale.y;\n            var prevProjectionTransform = this.projectionTransform;\n            /**\n             * Update the delta between the corrected box and the target box before user-set transforms were applied.\n             * This will allow us to calculate the corrected borderRadius and boxShadow to compensate\n             * for our layout reprojection, but still allow them to be scaled correctly by the user.\n             * It might be that to simplify this we may want to accept that user-set scale is also corrected\n             * and we wouldn't have to keep and calc both deltas, OR we could support a user setting\n             * to allow people to choose whether these styles are corrected based on just the\n             * layout reprojection or the final bounding box.\n             */\n            calcBoxDelta(this.projectionDelta, this.layoutCorrected, target, this.latestValues);\n            this.projectionTransform = buildProjectionTransform(this.projectionDelta, this.treeScale);\n            if (this.projectionTransform !== prevProjectionTransform ||\n                this.treeScale.x !== prevTreeScaleX ||\n                this.treeScale.y !== prevTreeScaleY) {\n                this.hasProjected = true;\n                this.scheduleRender();\n                this.notifyListeners(\"projectionUpdate\", target);\n            }\n        };\n        ProjectionNode.prototype.hide = function () {\n            this.isVisible = false;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.show = function () {\n            this.isVisible = true;\n            // TODO: Schedule render\n        };\n        ProjectionNode.prototype.scheduleRender = function (notifyAll) {\n            var _a, _b, _c;\n            if (notifyAll === void 0) { notifyAll = true; }\n            (_b = (_a = this.options).scheduleRender) === null || _b === void 0 ? void 0 : _b.call(_a);\n            notifyAll && ((_c = this.getStack()) === null || _c === void 0 ? void 0 : _c.scheduleRender());\n            if (this.resumingFrom && !this.resumingFrom.instance) {\n                this.resumingFrom = undefined;\n            }\n        };\n        ProjectionNode.prototype.setAnimationOrigin = function (delta, hasOnlyRelativeTargetChanged) {\n            var _this = this;\n            var _a;\n            if (hasOnlyRelativeTargetChanged === void 0) { hasOnlyRelativeTargetChanged = false; }\n            var snapshot = this.snapshot;\n            var snapshotLatestValues = (snapshot === null || snapshot === void 0 ? void 0 : snapshot.latestValues) || {};\n            var mixedValues = __assign({}, this.latestValues);\n            var targetDelta = createDelta();\n            this.relativeTarget = this.relativeTargetOrigin = undefined;\n            this.attemptToResolveRelativeTarget = !hasOnlyRelativeTargetChanged;\n            var relativeLayout = createBox();\n            var isSharedLayoutAnimation = snapshot === null || snapshot === void 0 ? void 0 : snapshot.isShared;\n            var isOnlyMember = (((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.members.length) || 0) <= 1;\n            var shouldCrossfadeOpacity = Boolean(isSharedLayoutAnimation &&\n                !isOnlyMember &&\n                this.options.crossfade === true &&\n                !this.path.some(hasOpacityCrossfade));\n            this.animationProgress = 0;\n            this.mixTargetDelta = function (latest) {\n                var _a;\n                var progress = latest / 1000;\n                mixAxisDelta(targetDelta.x, delta.x, progress);\n                mixAxisDelta(targetDelta.y, delta.y, progress);\n                _this.setTargetDelta(targetDelta);\n                if (_this.relativeTarget &&\n                    _this.relativeTargetOrigin &&\n                    _this.layout &&\n                    ((_a = _this.relativeParent) === null || _a === void 0 ? void 0 : _a.layout)) {\n                    calcRelativePosition(relativeLayout, _this.layout.actual, _this.relativeParent.layout.actual);\n                    mixBox(_this.relativeTarget, _this.relativeTargetOrigin, relativeLayout, progress);\n                }\n                if (isSharedLayoutAnimation) {\n                    _this.animationValues = mixedValues;\n                    mixValues(mixedValues, snapshotLatestValues, _this.latestValues, progress, shouldCrossfadeOpacity, isOnlyMember);\n                }\n                _this.root.scheduleUpdateProjection();\n                _this.scheduleRender();\n                _this.animationProgress = progress;\n            };\n            this.mixTargetDelta(0);\n        };\n        ProjectionNode.prototype.startAnimation = function (options) {\n            var _this = this;\n            var _a, _b;\n            this.notifyListeners(\"animationStart\");\n            (_a = this.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop();\n            if (this.resumingFrom) {\n                (_b = this.resumingFrom.currentAnimation) === null || _b === void 0 ? void 0 : _b.stop();\n            }\n            if (this.pendingAnimation) {\n                cancelSync.update(this.pendingAnimation);\n                this.pendingAnimation = undefined;\n            }\n            /**\n             * Start the animation in the next frame to have a frame with progress 0,\n             * where the target is the same as when the animation started, so we can\n             * calculate the relative positions correctly for instant transitions.\n             */\n            this.pendingAnimation = sync.update(function () {\n                globalProjectionState.hasAnimatedSinceResize = true;\n                _this.currentAnimation = animate(0, animationTarget, __assign(__assign({}, options), { onUpdate: function (latest) {\n                        var _a;\n                        _this.mixTargetDelta(latest);\n                        (_a = options.onUpdate) === null || _a === void 0 ? void 0 : _a.call(options, latest);\n                    }, onComplete: function () {\n                        var _a;\n                        (_a = options.onComplete) === null || _a === void 0 ? void 0 : _a.call(options);\n                        _this.completeAnimation();\n                    } }));\n                if (_this.resumingFrom) {\n                    _this.resumingFrom.currentAnimation = _this.currentAnimation;\n                }\n                _this.pendingAnimation = undefined;\n            });\n        };\n        ProjectionNode.prototype.completeAnimation = function () {\n            var _a;\n            if (this.resumingFrom) {\n                this.resumingFrom.currentAnimation = undefined;\n                this.resumingFrom.preserveOpacity = undefined;\n            }\n            (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.exitAnimationComplete();\n            this.resumingFrom =\n                this.currentAnimation =\n                    this.animationValues =\n                        undefined;\n            this.notifyListeners(\"animationComplete\");\n        };\n        ProjectionNode.prototype.finishAnimation = function () {\n            var _a;\n            if (this.currentAnimation) {\n                (_a = this.mixTargetDelta) === null || _a === void 0 ? void 0 : _a.call(this, animationTarget);\n                this.currentAnimation.stop();\n            }\n            this.completeAnimation();\n        };\n        ProjectionNode.prototype.applyTransformsToTarget = function () {\n            var _a = this.getLead(), targetWithTransforms = _a.targetWithTransforms, target = _a.target, layout = _a.layout, latestValues = _a.latestValues;\n            if (!targetWithTransforms || !target || !layout)\n                return;\n            copyBoxInto(targetWithTransforms, target);\n            /**\n             * Apply the latest user-set transforms to the targetBox to produce the targetBoxFinal.\n             * This is the final box that we will then project into by calculating a transform delta and\n             * applying it to the corrected box.\n             */\n            transformBox(targetWithTransforms, latestValues);\n            /**\n             * Update the delta between the corrected box and the final target box, after\n             * user-set transforms are applied to it. This will be used by the renderer to\n             * create a transform style that will reproject the element from its actual layout\n             * into the desired bounding box.\n             */\n            calcBoxDelta(this.projectionDeltaWithTransform, this.layoutCorrected, targetWithTransforms, latestValues);\n        };\n        ProjectionNode.prototype.registerSharedNode = function (layoutId, node) {\n            var _a, _b, _c;\n            if (!this.sharedNodes.has(layoutId)) {\n                this.sharedNodes.set(layoutId, new NodeStack());\n            }\n            var stack = this.sharedNodes.get(layoutId);\n            stack.add(node);\n            node.promote({\n                transition: (_a = node.options.initialPromotionConfig) === null || _a === void 0 ? void 0 : _a.transition,\n                preserveFollowOpacity: (_c = (_b = node.options.initialPromotionConfig) === null || _b === void 0 ? void 0 : _b.shouldPreserveFollowOpacity) === null || _c === void 0 ? void 0 : _c.call(_b, node),\n            });\n        };\n        ProjectionNode.prototype.isLead = function () {\n            var stack = this.getStack();\n            return stack ? stack.lead === this : true;\n        };\n        ProjectionNode.prototype.getLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? ((_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.lead) || this : this;\n        };\n        ProjectionNode.prototype.getPrevLead = function () {\n            var _a;\n            var layoutId = this.options.layoutId;\n            return layoutId ? (_a = this.getStack()) === null || _a === void 0 ? void 0 : _a.prevLead : undefined;\n        };\n        ProjectionNode.prototype.getStack = function () {\n            var layoutId = this.options.layoutId;\n            if (layoutId)\n                return this.root.sharedNodes.get(layoutId);\n        };\n        ProjectionNode.prototype.promote = function (_a) {\n            var _b = _a === void 0 ? {} : _a, needsReset = _b.needsReset, transition = _b.transition, preserveFollowOpacity = _b.preserveFollowOpacity;\n            var stack = this.getStack();\n            if (stack)\n                stack.promote(this, preserveFollowOpacity);\n            if (needsReset) {\n                this.projectionDelta = undefined;\n                this.needsReset = true;\n            }\n            if (transition)\n                this.setOptions({ transition: transition });\n        };\n        ProjectionNode.prototype.relegate = function () {\n            var stack = this.getStack();\n            if (stack) {\n                return stack.relegate(this);\n            }\n            else {\n                return false;\n            }\n        };\n        ProjectionNode.prototype.resetRotation = function () {\n            var visualElement = this.options.visualElement;\n            if (!visualElement)\n                return;\n            // If there's no detected rotation values, we can early return without a forced render.\n            var hasRotate = false;\n            // Keep a record of all the values we've reset\n            var resetValues = {};\n            // Check the rotate value of all axes and reset to 0\n            for (var i = 0; i < transformAxes.length; i++) {\n                var axis = transformAxes[i];\n                var key = \"rotate\" + axis;\n                // If this rotation doesn't exist as a motion value, then we don't\n                // need to reset it\n                if (!visualElement.getStaticValue(key)) {\n                    continue;\n                }\n                hasRotate = true;\n                // Record the rotation and then temporarily set it to 0\n                resetValues[key] = visualElement.getStaticValue(key);\n                visualElement.setStaticValue(key, 0);\n            }\n            // If there's no rotation values, we don't need to do any more.\n            if (!hasRotate)\n                return;\n            // Force a render of this element to apply the transform with all rotations\n            // set to 0.\n            visualElement === null || visualElement === void 0 ? void 0 : visualElement.syncRender();\n            // Put back all the values we reset\n            for (var key in resetValues) {\n                visualElement.setStaticValue(key, resetValues[key]);\n            }\n            // Schedule a render for the next frame. This ensures we won't visually\n            // see the element with the reset rotate value applied.\n            visualElement.scheduleRender();\n        };\n        ProjectionNode.prototype.getProjectionStyles = function (styleProp) {\n            var _a, _b, _c, _d, _e, _f;\n            if (styleProp === void 0) { styleProp = {}; }\n            // TODO: Return lifecycle-persistent object\n            var styles = {};\n            if (!this.instance || this.isSVG)\n                return styles;\n            if (!this.isVisible) {\n                return { visibility: \"hidden\" };\n            }\n            else {\n                styles.visibility = \"\";\n            }\n            var transformTemplate = (_a = this.options.visualElement) === null || _a === void 0 ? void 0 : _a.getProps().transformTemplate;\n            if (this.needsReset) {\n                this.needsReset = false;\n                styles.opacity = \"\";\n                styles.pointerEvents =\n                    resolveMotionValue(styleProp.pointerEvents) || \"\";\n                styles.transform = transformTemplate\n                    ? transformTemplate(this.latestValues, \"\")\n                    : \"none\";\n                return styles;\n            }\n            var lead = this.getLead();\n            if (!this.projectionDelta || !this.layout || !lead.target) {\n                var emptyStyles = {};\n                if (this.options.layoutId) {\n                    emptyStyles.opacity = (_b = this.latestValues.opacity) !== null && _b !== void 0 ? _b : 1;\n                    emptyStyles.pointerEvents =\n                        resolveMotionValue(styleProp.pointerEvents) || \"\";\n                }\n                if (this.hasProjected && !hasTransform(this.latestValues)) {\n                    emptyStyles.transform = transformTemplate\n                        ? transformTemplate({}, \"\")\n                        : \"none\";\n                    this.hasProjected = false;\n                }\n                return emptyStyles;\n            }\n            var valuesToRender = lead.animationValues || lead.latestValues;\n            this.applyTransformsToTarget();\n            styles.transform = buildProjectionTransform(this.projectionDeltaWithTransform, this.treeScale, valuesToRender);\n            if (transformTemplate) {\n                styles.transform = transformTemplate(valuesToRender, styles.transform);\n            }\n            var _g = this.projectionDelta, x = _g.x, y = _g.y;\n            styles.transformOrigin = \"\".concat(x.origin * 100, \"% \").concat(y.origin * 100, \"% 0\");\n            if (lead.animationValues) {\n                /**\n                 * If the lead component is animating, assign this either the entering/leaving\n                 * opacity\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_d = (_c = valuesToRender.opacity) !== null && _c !== void 0 ? _c : this.latestValues.opacity) !== null && _d !== void 0 ? _d : 1\n                        : this.preserveOpacity\n                            ? this.latestValues.opacity\n                            : valuesToRender.opacityExit;\n            }\n            else {\n                /**\n                 * Or we're not animating at all, set the lead component to its actual\n                 * opacity and other components to hidden.\n                 */\n                styles.opacity =\n                    lead === this\n                        ? (_e = valuesToRender.opacity) !== null && _e !== void 0 ? _e : \"\"\n                        : (_f = valuesToRender.opacityExit) !== null && _f !== void 0 ? _f : 0;\n            }\n            /**\n             * Apply scale correction\n             */\n            for (var key in scaleCorrectors) {\n                if (valuesToRender[key] === undefined)\n                    continue;\n                var _h = scaleCorrectors[key], correct = _h.correct, applyTo = _h.applyTo;\n                var corrected = correct(valuesToRender[key], lead);\n                if (applyTo) {\n                    var num = applyTo.length;\n                    for (var i = 0; i < num; i++) {\n                        styles[applyTo[i]] = corrected;\n                    }\n                }\n                else {\n                    styles[key] = corrected;\n                }\n            }\n            /**\n             * Disable pointer events on follow components. This is to ensure\n             * that if a follow component covers a lead component it doesn't block\n             * pointer events on the lead.\n             */\n            if (this.options.layoutId) {\n                styles.pointerEvents =\n                    lead === this\n                        ? resolveMotionValue(styleProp.pointerEvents) || \"\"\n                        : \"none\";\n            }\n            return styles;\n        };\n        ProjectionNode.prototype.clearSnapshot = function () {\n            this.resumeFrom = this.snapshot = undefined;\n        };\n        // Only run on root\n        ProjectionNode.prototype.resetTree = function () {\n            this.root.nodes.forEach(function (node) { var _a; return (_a = node.currentAnimation) === null || _a === void 0 ? void 0 : _a.stop(); });\n            this.root.nodes.forEach(clearMeasurements);\n            this.root.sharedNodes.clear();\n        };\n        return ProjectionNode;\n    }());\n}\nfunction updateLayout(node) {\n    node.updateLayout();\n}\nfunction notifyLayoutUpdate(node) {\n    var _a, _b, _c, _d;\n    var snapshot = (_b = (_a = node.resumeFrom) === null || _a === void 0 ? void 0 : _a.snapshot) !== null && _b !== void 0 ? _b : node.snapshot;\n    if (node.isLead() &&\n        node.layout &&\n        snapshot &&\n        node.hasListeners(\"didUpdate\")) {\n        var _e = node.layout, layout_1 = _e.actual, measuredLayout = _e.measured;\n        // TODO Maybe we want to also resize the layout snapshot so we don't trigger\n        // animations for instance if layout=\"size\" and an element has only changed position\n        if (node.options.animationType === \"size\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(axisSnapshot);\n                axisSnapshot.min = layout_1[axis].min;\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        else if (node.options.animationType === \"position\") {\n            eachAxis(function (axis) {\n                var axisSnapshot = snapshot.isShared\n                    ? snapshot.measured[axis]\n                    : snapshot.layout[axis];\n                var length = calcLength(layout_1[axis]);\n                axisSnapshot.max = axisSnapshot.min + length;\n            });\n        }\n        var layoutDelta = createDelta();\n        calcBoxDelta(layoutDelta, layout_1, snapshot.layout);\n        var visualDelta = createDelta();\n        if (snapshot.isShared) {\n            calcBoxDelta(visualDelta, node.applyTransform(measuredLayout, true), snapshot.measured);\n        }\n        else {\n            calcBoxDelta(visualDelta, layout_1, snapshot.layout);\n        }\n        var hasLayoutChanged = !isDeltaZero(layoutDelta);\n        var hasRelativeTargetChanged = false;\n        if (!node.resumeFrom) {\n            node.relativeParent = node.getClosestProjectingParent();\n            /**\n             * If the relativeParent is itself resuming from a different element then\n             * the relative snapshot is not relavent\n             */\n            if (node.relativeParent && !node.relativeParent.resumeFrom) {\n                var _f = node.relativeParent, parentSnapshot = _f.snapshot, parentLayout = _f.layout;\n                if (parentSnapshot && parentLayout) {\n                    var relativeSnapshot = createBox();\n                    calcRelativePosition(relativeSnapshot, snapshot.layout, parentSnapshot.layout);\n                    var relativeLayout = createBox();\n                    calcRelativePosition(relativeLayout, layout_1, parentLayout.actual);\n                    if (!boxEquals(relativeSnapshot, relativeLayout)) {\n                        hasRelativeTargetChanged = true;\n                    }\n                }\n            }\n        }\n        node.notifyListeners(\"didUpdate\", {\n            layout: layout_1,\n            snapshot: snapshot,\n            delta: visualDelta,\n            layoutDelta: layoutDelta,\n            hasLayoutChanged: hasLayoutChanged,\n            hasRelativeTargetChanged: hasRelativeTargetChanged,\n        });\n    }\n    else if (node.isLead()) {\n        (_d = (_c = node.options).onExitComplete) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n    /**\n     * Clearing transition\n     * TODO: Investigate why this transition is being passed in as {type: false } from Framer\n     * and why we need it at all\n     */\n    node.options.transition = undefined;\n}\nfunction clearSnapshot(node) {\n    node.clearSnapshot();\n}\nfunction clearMeasurements(node) {\n    node.clearMeasurements();\n}\nfunction resetTransformStyle(node) {\n    var visualElement = node.options.visualElement;\n    if (visualElement === null || visualElement === void 0 ? void 0 : visualElement.getProps().onBeforeLayoutMeasure) {\n        visualElement.notifyBeforeLayoutMeasure();\n    }\n    node.resetTransform();\n}\nfunction finishAnimation(node) {\n    node.finishAnimation();\n    node.targetDelta = node.relativeTarget = node.target = undefined;\n}\nfunction resolveTargetDelta(node) {\n    node.resolveTargetDelta();\n}\nfunction calcProjection(node) {\n    node.calcProjection();\n}\nfunction resetRotation(node) {\n    node.resetRotation();\n}\nfunction removeLeadSnapshots(stack) {\n    stack.removeLeadSnapshot();\n}\nfunction mixAxisDelta(output, delta, p) {\n    output.translate = mix(delta.translate, 0, p);\n    output.scale = mix(delta.scale, 1, p);\n    output.origin = delta.origin;\n    output.originPoint = delta.originPoint;\n}\nfunction mixAxis(output, from, to, p) {\n    output.min = mix(from.min, to.min, p);\n    output.max = mix(from.max, to.max, p);\n}\nfunction mixBox(output, from, to, p) {\n    mixAxis(output.x, from.x, to.x, p);\n    mixAxis(output.y, from.y, to.y, p);\n}\nfunction hasOpacityCrossfade(node) {\n    return (node.animationValues && node.animationValues.opacityExit !== undefined);\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction mountNodeEarly(node, id) {\n    /**\n     * Rather than searching the DOM from document we can search the\n     * path for the deepest mounted ancestor and search from there\n     */\n    var searchNode = node.root;\n    for (var i = node.path.length - 1; i >= 0; i--) {\n        if (Boolean(node.path[i].instance)) {\n            searchNode = node.path[i];\n            break;\n        }\n    }\n    var searchElement = searchNode && searchNode !== node.root ? searchNode.instance : document;\n    var element = searchElement.querySelector(\"[data-projection-id=\\\"\".concat(id, \"\\\"]\"));\n    if (element)\n        node.mount(element, true);\n}\nfunction roundAxis(axis) {\n    axis.min = Math.round(axis.min);\n    axis.max = Math.round(axis.max);\n}\nfunction roundBox(box) {\n    roundAxis(box.x);\n    roundAxis(box.y);\n}\n\nexport { createProjectionNode, mixAxis, mixAxisDelta, mixBox };\n"]},"metadata":{},"sourceType":"module"}