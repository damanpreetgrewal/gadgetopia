{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction resolveValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n  } catch (e) {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = resolveValue(modeStorageKey, defaultMode);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme: resolveValue(`${colorSchemeStorageKey}-light`) || defaultLightColorScheme,\n      darkColorScheme: resolveValue(`${colorSchemeStorageKey}-dark`) || defaultDarkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      const newMode = !mode ? defaultMode : mode;\n\n      if (mode === currentState.mode) {\n        return currentState;\n      }\n\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(modeStorageKey, newMode);\n      }\n\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value || typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n\n          if (!value) {\n            // reset to default color scheme\n            newState.lightColorScheme = defaultLightColorScheme;\n            newState.darkColorScheme = defaultDarkColorScheme;\n            return newState;\n          }\n\n          processState(currentState, mode => {\n            localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else if (value.light && !joinedColorSchemes.includes(value.light) || value.dark && !joinedColorSchemes.includes(value.dark)) {\n      console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n\n        if (value.light || value.light === null) {\n          newState.lightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        }\n\n        if (value.dark || value.dark === null) {\n          newState.darkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        }\n\n        return newState;\n      });\n\n      if (value.light) {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, value.light);\n      }\n\n      if (value.dark) {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, value.dark);\n      }\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(e => {\n    if (state.mode === 'system') {\n      setState(currentState => _extends({}, currentState, {\n        systemMode: e != null && e.matches ? 'dark' : 'light'\n      }));\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = (...args) => mediaListener.current(...args); // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => media.removeListener(handler);\n  }, []); // Save mode, lightColorScheme & darkColorScheme to localStorage\n\n  React.useEffect(() => {\n    if (state.mode) {\n      localStorage.setItem(modeStorageKey, state.mode);\n    }\n\n    processState(state, mode => {\n      if (mode === 'light') {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, state.lightColorScheme);\n      }\n\n      if (mode === 'dark') {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, state.darkColorScheme);\n      }\n    });\n  }, [state, colorSchemeStorageKey, modeStorageKey]); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    const handleStorage = event => {\n      const value = event.newValue;\n\n      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n        // If the key is deleted, value will be null then reset color scheme to the default one.\n        if (event.key.endsWith('light')) {\n          setColorScheme({\n            light: value\n          });\n        }\n\n        if (event.key.endsWith('dark')) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }\n\n      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n        setMode(value || defaultMode);\n      }\n    };\n\n    if (storageWindow) {\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => storageWindow.removeEventListener('storage', handleStorage);\n    }\n\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}","map":{"version":3,"sources":["C:/Users/daman/Desktop/Final Project/gadgetopia/frontend/node_modules/@mui/system/esm/cssVars/useCurrentColorScheme.js"],"names":["_extends","React","DEFAULT_MODE_STORAGE_KEY","DEFAULT_COLOR_SCHEME_STORAGE_KEY","getSystemMode","mode","window","mql","matchMedia","matches","undefined","processState","state","callback","systemMode","getColorScheme","lightColorScheme","darkColorScheme","resolveValue","key","defaultValue","value","localStorage","getItem","e","useCurrentColorScheme","options","defaultMode","defaultLightColorScheme","defaultDarkColorScheme","supportedColorSchemes","modeStorageKey","colorSchemeStorageKey","storageWindow","joinedColorSchemes","join","setState","useState","initialMode","colorScheme","setMode","useCallback","currentState","newMode","setItem","setColorScheme","includes","console","error","newState","light","dark","handleMediaQuery","mediaListener","useRef","current","useEffect","handler","args","media","addListener","removeListener","handleStorage","event","newValue","startsWith","match","endsWith","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { DEFAULT_MODE_STORAGE_KEY, DEFAULT_COLOR_SCHEME_STORAGE_KEY } from './getInitColorSchemeScript';\nexport function getSystemMode(mode) {\n  if (typeof window !== 'undefined' && mode === 'system') {\n    const mql = window.matchMedia('(prefers-color-scheme: dark)');\n\n    if (mql.matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  return undefined;\n}\n\nfunction processState(state, callback) {\n  if (state.mode === 'light' || state.mode === 'system' && state.systemMode === 'light') {\n    return callback('light');\n  }\n\n  if (state.mode === 'dark' || state.mode === 'system' && state.systemMode === 'dark') {\n    return callback('dark');\n  }\n\n  return undefined;\n}\n\nexport function getColorScheme(state) {\n  return processState(state, mode => {\n    if (mode === 'light') {\n      return state.lightColorScheme;\n    }\n\n    if (mode === 'dark') {\n      return state.darkColorScheme;\n    }\n\n    return undefined;\n  });\n}\n\nfunction resolveValue(key, defaultValue) {\n  if (typeof window === 'undefined') {\n    return undefined;\n  }\n\n  let value;\n\n  try {\n    value = localStorage.getItem(key) || undefined;\n  } catch (e) {// Unsupported\n  }\n\n  return value || defaultValue;\n}\n\nexport default function useCurrentColorScheme(options) {\n  const {\n    defaultMode = 'light',\n    defaultLightColorScheme,\n    defaultDarkColorScheme,\n    supportedColorSchemes = [],\n    modeStorageKey = DEFAULT_MODE_STORAGE_KEY,\n    colorSchemeStorageKey = DEFAULT_COLOR_SCHEME_STORAGE_KEY,\n    storageWindow = typeof window === 'undefined' ? undefined : window\n  } = options;\n  const joinedColorSchemes = supportedColorSchemes.join(',');\n  const [state, setState] = React.useState(() => {\n    const initialMode = resolveValue(modeStorageKey, defaultMode);\n    return {\n      mode: initialMode,\n      systemMode: getSystemMode(initialMode),\n      lightColorScheme: resolveValue(`${colorSchemeStorageKey}-light`) || defaultLightColorScheme,\n      darkColorScheme: resolveValue(`${colorSchemeStorageKey}-dark`) || defaultDarkColorScheme\n    };\n  });\n  const colorScheme = getColorScheme(state);\n  const setMode = React.useCallback(mode => {\n    setState(currentState => {\n      const newMode = !mode ? defaultMode : mode;\n\n      if (mode === currentState.mode) {\n        return currentState;\n      }\n\n      if (typeof localStorage !== 'undefined') {\n        localStorage.setItem(modeStorageKey, newMode);\n      }\n\n      return _extends({}, currentState, {\n        mode: newMode,\n        systemMode: getSystemMode(newMode)\n      });\n    });\n  }, [modeStorageKey, defaultMode]);\n  const setColorScheme = React.useCallback(value => {\n    if (!value || typeof value === 'string') {\n      if (value && !joinedColorSchemes.includes(value)) {\n        console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n      } else {\n        setState(currentState => {\n          const newState = _extends({}, currentState);\n\n          if (!value) {\n            // reset to default color scheme\n            newState.lightColorScheme = defaultLightColorScheme;\n            newState.darkColorScheme = defaultDarkColorScheme;\n            return newState;\n          }\n\n          processState(currentState, mode => {\n            localStorage.setItem(`${colorSchemeStorageKey}-${mode}`, value);\n\n            if (mode === 'light') {\n              newState.lightColorScheme = value;\n            }\n\n            if (mode === 'dark') {\n              newState.darkColorScheme = value;\n            }\n          });\n          return newState;\n        });\n      }\n    } else if (value.light && !joinedColorSchemes.includes(value.light) || value.dark && !joinedColorSchemes.includes(value.dark)) {\n      console.error(`\\`${value}\\` does not exist in \\`theme.colorSchemes\\`.`);\n    } else {\n      setState(currentState => {\n        const newState = _extends({}, currentState);\n\n        if (value.light || value.light === null) {\n          newState.lightColorScheme = value.light === null ? defaultLightColorScheme : value.light;\n        }\n\n        if (value.dark || value.dark === null) {\n          newState.darkColorScheme = value.dark === null ? defaultDarkColorScheme : value.dark;\n        }\n\n        return newState;\n      });\n\n      if (value.light) {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, value.light);\n      }\n\n      if (value.dark) {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, value.dark);\n      }\n    }\n  }, [joinedColorSchemes, colorSchemeStorageKey, defaultLightColorScheme, defaultDarkColorScheme]);\n  const handleMediaQuery = React.useCallback(e => {\n    if (state.mode === 'system') {\n      setState(currentState => _extends({}, currentState, {\n        systemMode: e != null && e.matches ? 'dark' : 'light'\n      }));\n    }\n  }, [state.mode]); // Ref hack to avoid adding handleMediaQuery as a dep\n\n  const mediaListener = React.useRef(handleMediaQuery);\n  mediaListener.current = handleMediaQuery;\n  React.useEffect(() => {\n    const handler = (...args) => mediaListener.current(...args); // Always listen to System preference\n\n\n    const media = window.matchMedia('(prefers-color-scheme: dark)'); // Intentionally use deprecated listener methods to support iOS & old browsers\n\n    media.addListener(handler);\n    handler(media);\n    return () => media.removeListener(handler);\n  }, []); // Save mode, lightColorScheme & darkColorScheme to localStorage\n\n  React.useEffect(() => {\n    if (state.mode) {\n      localStorage.setItem(modeStorageKey, state.mode);\n    }\n\n    processState(state, mode => {\n      if (mode === 'light') {\n        localStorage.setItem(`${colorSchemeStorageKey}-light`, state.lightColorScheme);\n      }\n\n      if (mode === 'dark') {\n        localStorage.setItem(`${colorSchemeStorageKey}-dark`, state.darkColorScheme);\n      }\n    });\n  }, [state, colorSchemeStorageKey, modeStorageKey]); // Handle when localStorage has changed\n\n  React.useEffect(() => {\n    const handleStorage = event => {\n      const value = event.newValue;\n\n      if (typeof event.key === 'string' && event.key.startsWith(colorSchemeStorageKey) && (!value || joinedColorSchemes.match(value))) {\n        // If the key is deleted, value will be null then reset color scheme to the default one.\n        if (event.key.endsWith('light')) {\n          setColorScheme({\n            light: value\n          });\n        }\n\n        if (event.key.endsWith('dark')) {\n          setColorScheme({\n            dark: value\n          });\n        }\n      }\n\n      if (event.key === modeStorageKey && (!value || ['light', 'dark', 'system'].includes(value))) {\n        setMode(value || defaultMode);\n      }\n    };\n\n    if (storageWindow) {\n      // For syncing color-scheme changes between iframes\n      storageWindow.addEventListener('storage', handleStorage);\n      return () => storageWindow.removeEventListener('storage', handleStorage);\n    }\n\n    return undefined;\n  }, [setColorScheme, setMode, modeStorageKey, colorSchemeStorageKey, joinedColorSchemes, defaultMode, storageWindow]);\n  return _extends({}, state, {\n    colorScheme,\n    setMode,\n    setColorScheme\n  });\n}"]},"metadata":{},"sourceType":"module"}